<!-- ==== ULTRA-MODERN SYSTEM ADMINISTRATION CENTER ==== -->
<section class="panel glass" id="secSystem">
  <div class="panel-head">
    <h3>
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: var(--space-3);">
        <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
        <line x1="8" y1="21" x2="16" y2="21"/>
        <line x1="12" y1="17" x2="12" y2="21"/>
      </svg>
      System Administration
    </h3>
    <div class="panel-actions">
      <div class="system-controls">
        <select id="systemView" class="control-select">
          <option value="overview">Overview</option>
          <option value="processes">Processes</option>
          <option value="services">Services</option>
          <option value="logs">System Logs</option>
        </select>
        <button class="btn small" id="exportSystem" style="display: flex; align-items: center; gap: var(--space-2);">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
            <polyline points="7,10 12,15 17,10"/>
            <line x1="12" y1="15" x2="12" y2="3"/>
          </svg>
          Export
        </button>
      </div>
      <button class="btn small" id="sysRefresh" style="display: flex; align-items: center; gap: var(--space-2);">
        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M23 4v6h-6M1 20v-6h6"/>
          <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
        </svg>
        Refresh
      </button>
    </div>
  </div>
  
  <!-- System Status Overview -->
  <div class="system-overview" style="padding: var(--space-6) var(--space-8); border-bottom: 1px solid var(--glass-border-light); background: var(--glass-light);">
    <div class="system-stats-grid">
      <div class="system-stat-card">
        <div class="stat-header">
          <div class="stat-icon uptime">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"/>
              <polyline points="12,6 12,12 16,14"/>
            </svg>
          </div>
          <div class="stat-info">
            <div class="stat-label">System Uptime</div>
            <div class="stat-value" id="sysUptime">—</div>
            <div class="stat-unit">hours</div>
          </div>
        </div>
        <div class="stat-details">
          <div class="detail-item">
            <span class="detail-label">Started</span>
            <span class="detail-value" id="sysStarted">—</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Restarts</span>
            <span class="detail-value" id="sysRestarts">—</span>
          </div>
        </div>
      </div>
      
      <div class="system-stat-card">
        <div class="stat-header">
          <div class="stat-icon actions">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="9,11 12,14 22,4"/>
              <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"/>
            </svg>
          </div>
          <div class="stat-info">
            <div class="stat-label">Actions Processed</div>
            <div class="stat-value" id="sysDone">—</div>
            <div class="stat-unit">total</div>
          </div>
        </div>
        <div class="stat-details">
          <div class="detail-item">
            <span class="detail-label">Success Rate</span>
            <span class="detail-value" id="sysSuccessRate">—</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Per Hour</span>
            <span class="detail-value" id="sysActionsPerHour">—</span>
          </div>
        </div>
      </div>
      
      <div class="system-stat-card">
        <div class="stat-header">
          <div class="stat-icon queue">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="8" y1="6" x2="21" y2="6"/>
              <line x1="8" y1="12" x2="21" y2="12"/>
              <line x1="8" y1="18" x2="21" y2="18"/>
              <line x1="3" y1="6" x2="3.01" y2="6"/>
              <line x1="3" y1="12" x2="3.01" y2="12"/>
              <line x1="3" y1="18" x2="3.01" y2="18"/>
            </svg>
          </div>
          <div class="stat-info">
            <div class="stat-label">Queue Status</div>
            <div class="stat-value" id="sysQueued">—</div>
            <div class="stat-unit">pending</div>
          </div>
        </div>
        <div class="stat-details">
          <div class="detail-item">
            <span class="detail-label">Processing</span>
            <span class="detail-value" id="sysProcessing">—</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Avg Wait</span>
            <span class="detail-value" id="sysAvgWait">—</span>
          </div>
        </div>
      </div>
      
      <div class="system-stat-card">
        <div class="stat-header">
          <div class="stat-icon storage">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <ellipse cx="12" cy="5" rx="9" ry="3"/>
              <path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"/>
              <path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"/>
            </svg>
          </div>
          <div class="stat-info">
            <div class="stat-label">Session Store</div>
            <div class="stat-value" id="sysStore"><%= sessionStoreType || 'Memory' %></div>
            <div class="stat-unit">active</div>
          </div>
        </div>
        <div class="stat-details">
          <div class="detail-item">
            <span class="detail-label">Sessions</span>
            <span class="detail-value" id="sysActiveSessions">—</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Size</span>
            <span class="detail-value" id="sysStoreSize">—</span>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- System Information Panel -->
  <div class="system-info-panel" style="padding: var(--space-8);">
    <div class="info-grid">
      <div class="info-section">
        <div class="info-header">
          <h4>Bot Presence</h4>
          <div class="presence-status" id="presenceStatus">
            <span class="status-indicator"></span>
            <span class="status-text">Online</span>
          </div>
        </div>
        <div class="info-content" style="background: var(--glass-medium); backdrop-filter: blur(8px); border: 1px solid var(--glass-border-light); border-radius: var(--radius-2xl); padding: var(--space-6);">
          <div class="presence-details" id="sysPresence">
            <div class="presence-item">
              <span class="presence-label">Status:</span>
              <span class="presence-value" id="botStatus">Online</span>
            </div>
            <div class="presence-item">
              <span class="presence-label">Activity:</span>
              <span class="presence-value" id="botActivity">Watching servers</span>
            </div>
            <div class="presence-item">
              <span class="presence-label">Guilds:</span>
              <span class="presence-value" id="botGuilds">—</span>
            </div>
            <div class="presence-item">
              <span class="presence-label">Users:</span>
              <span class="presence-value" id="botUsers">—</span>
            </div>
            <div class="presence-item">
              <span class="presence-label">Channels:</span>
              <span class="presence-value" id="botChannels">—</span>
            </div>
          </div>
          
          <div class="presence-controls" style="margin-top: var(--space-6); display: flex; gap: var(--space-3);">
            <button class="btn small secondary" id="updatePresence">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"/>
              </svg>
              Update Status
            </button>
            <button class="btn small secondary" id="refreshPresence">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M23 4v6h-6M1 20v-6h6"/>
                <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
              </svg>
              Refresh
            </button>
          </div>
        </div>
      </div>
      
      <div class="info-section">
        <div class="info-header">
          <h4>Queue Management</h4>
          <div class="queue-controls">
            <button class="btn mini" id="pauseQueue">
              <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="6" y="4" width="4" height="16"/>
                <rect x="14" y="4" width="4" height="16"/>
              </svg>
              Pause
            </button>
            <button class="btn mini" id="clearQueue">
              <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="18" y1="6" x2="6" y2="18"/>
                <line x1="6" y1="6" x2="18" y2="18"/>
              </svg>
              Clear
            </button>
          </div>
        </div>
        <div class="info-content" style="background: var(--glass-medium); backdrop-filter: blur(8px); border: 1px solid var(--glass-border-light); border-radius: var(--radius-2xl); padding: var(--space-6);">
          <div class="queue-details" id="sysQueueDetails">
            <div class="queue-metrics">
              <div class="queue-metric">
                <div class="metric-label">Pending Actions</div>
                <div class="metric-value" id="queuePending">—</div>
              </div>
              <div class="queue-metric">
                <div class="metric-label">Processing Rate</div>
                <div class="metric-value" id="queueRate">— /min</div>
              </div>
              <div class="queue-metric">
                <div class="metric-label">Average Wait Time</div>
                <div class="metric-value" id="queueWaitTime">— seconds</div>
              </div>
              <div class="queue-metric">
                <div class="metric-label">Queue Health</div>
                <div class="metric-value queue-health" id="queueHealth">Healthy</div>
              </div>
            </div>
            
            <div class="queue-progress" style="margin-top: var(--space-4);">
              <div class="progress-header">
                <span class="progress-label">Queue Processing</span>
                <span class="progress-percentage" id="queueProgress">75%</span>
              </div>
              <div class="progress-bar">
                <div class="progress-fill" style="width: 75%"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- System Processes & Services -->
  <div class="system-processes" style="margin-top: var(--space-8);">
    <div class="processes-header">
      <h4>System Processes</h4>
      <div class="processes-controls">
        <div class="search-box">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="11" cy="11" r="8"/>
            <path d="M21 21l-4.35-4.35"/>
          </svg>
          <input type="text" id="processSearch" placeholder="Search processes...">
        </div>
        <button class="btn small" id="killProcess" disabled>Kill Process</button>
        <button class="btn small" id="restartProcess" disabled>Restart</button>
      </div>
    </div>
    
    <div class="processes-table" style="background: var(--glass-light); backdrop-filter: blur(8px); border: 1px solid var(--glass-border-light); border-radius: var(--radius-3xl); padding: var(--space-6); margin-top: var(--space-4);">
      <table class="data-table" id="processesTable">
        <thead>
          <tr>
            <th><input type="checkbox" id="selectAllProcesses"></th>
            <th>Process Name</th>
            <th>PID</th>
            <th>CPU %</th>
            <th>Memory</th>
            <th>Status</th>
            <th>Uptime</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="processesTableBody">
          <!-- Process data will be populated here -->
        </tbody>
      </table>
    </div>
  </div>
  
  <!-- System Services -->
  <div class="system-services" style="margin-top: var(--space-8);">
    <div class="services-header">
      <h4>System Services</h4>
      <div class="services-controls">
        <select id="serviceFilter" class="control-select">
          <option value="all">All Services</option>
          <option value="running">Running Only</option>
          <option value="stopped">Stopped Only</option>
          <option value="critical">Critical Services</option>
        </select>
        <button class="btn small" id="startService" disabled>Start</button>
        <button class="btn small" id="stopService" disabled>Stop</button>
        <button class="btn small" id="restartService" disabled>Restart</button>
      </div>
    </div>
    
    <div class="services-grid" id="servicesGrid">
      <!-- Services will be populated here -->
    </div>
  </div>
  
  <!-- System Logs -->
  <div class="system-logs" style="margin-top: var(--space-8);">
    <div class="logs-header">
      <h4>System Logs</h4>
      <div class="logs-controls">
        <select id="logLevel" class="control-select">
          <option value="all">All Levels</option>
          <option value="error">Errors Only</option>
          <option value="warn">Warnings Only</option>
          <option value="info">Info Only</option>
          <option value="debug">Debug Only</option>
        </select>
        <select id="logSource" class="control-select">
          <option value="all">All Sources</option>
          <option value="bot">Bot Core</option>
          <option value="dashboard">Dashboard</option>
          <option value="api">API</option>
          <option value="database">Database</option>
        </select>
        <button class="btn small" id="clearLogs">Clear Logs</button>
        <button class="btn small" id="downloadLogs">Download</button>
      </div>
    </div>
    
    <div class="logs-container" style="background: var(--glass-dark); backdrop-filter: blur(8px); border: 1px solid var(--glass-border-light); border-radius: var(--radius-3xl); padding: var(--space-6); margin-top: var(--space-4); height: 400px; overflow-y: auto;">
      <div class="logs-content" id="logsContent">
        <!-- Log entries will be populated here -->
      </div>
    </div>
  </div>
  
  <!-- Emergency Controls -->
  <div class="emergency-controls" style="margin-top: var(--space-8); padding: var(--space-6); background: var(--glass-light); backdrop-filter: blur(8px); border: 1px solid var(--glass-border-light); border-radius: var(--radius-3xl);">
    <div class="emergency-header">
      <h4 style="color: var(--red-400); display: flex; align-items: center; gap: var(--space-3);">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
          <line x1="12" y1="9" x2="12" y2="13"/>
          <line x1="12" y1="17" x2="12.01" y2="17"/>
        </svg>
        Emergency System Controls
      </h4>
      <p style="color: var(--text-muted); font-size: var(--text-sm); margin-top: var(--space-2);">
        Use these controls only in emergency situations. All actions require confirmation.
      </p>
    </div>
    
    <div class="emergency-actions" style="display: flex; gap: var(--space-4); margin-top: var(--space-6);">
      <button class="btn danger" id="emergencyRestart">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M23 4v6h-6M1 20v-6h6"/>
          <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
        </svg>
        Emergency Restart
      </button>
      <button class="btn danger" id="emergencyShutdown">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M18.36 6.64a9 9 0 1 1-12.73 0"/>
          <line x1="12" y1="2" x2="12" y2="12"/>
        </svg>
        Emergency Shutdown
      </button>
      <button class="btn danger" id="forceKillProcesses">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"/>
          <line x1="6" y1="6" x2="18" y2="18"/>
        </svg>
        Force Kill All
      </button>
      <button class="btn warning" id="flushCaches">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 6h18l-2 13H5L3 6z"/>
          <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
        </svg>
        Flush All Caches
      </button>
    </div>
  </div>
</section>

<style>
  /* ==== SYSTEM ADMINISTRATION SPECIFIC STYLES ==== */
  .system-controls {
    display: flex;
    gap: var(--space-3);
    align-items: center;
  }
  
  .system-overview {
    background: var(--glass-light);
    backdrop-filter: blur(8px);
  }
  
  .system-stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--space-6);
  }
  
  .system-stat-card {
    background: var(--glass-medium);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-3xl);
    padding: var(--space-6);
    transition: all var(--duration-300) var(--ease-out);
    animation: slideInUp 0.3s var(--ease-spring);
  }
  
  .system-stat-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
    background: var(--glass-heavy);
  }
  
  .stat-header {
    display: flex;
    align-items: flex-start;
    gap: var(--space-4);
    margin-bottom: var(--space-5);
  }
  
  .stat-icon {
    width: 48px;
    height: 48px;
    border-radius: var(--radius-2xl);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }
  
  .stat-icon.uptime {
    background: linear-gradient(135deg, var(--emerald-500/20), var(--emerald-600/30));
    color: var(--emerald-400);
  }
  
  .stat-icon.actions {
    background: linear-gradient(135deg, var(--blue-500/20), var(--blue-600/30));
    color: var(--blue-400);
  }
  
  .stat-icon.queue {
    background: linear-gradient(135deg, var(--purple-500/20), var(--purple-600/30));
    color: var(--purple-400);
  }
  
  .stat-icon.storage {
    background: linear-gradient(135deg, var(--orange-500/20), var(--orange-600/30));
    color: var(--orange-400);
  }
  
  .stat-info {
    flex: 1;
    min-width: 0;
  }
  
  .stat-label {
    font-size: var(--text-sm);
    color: var(--text-muted);
    margin-bottom: var(--space-1);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 500;
  }
  
  .stat-value {
    font-family: 'JetBrains Mono', monospace;
    font-size: var(--text-2xl);
    font-weight: 700;
    color: var(--text-primary);
    line-height: 1;
  }
  
  .stat-unit {
    font-size: var(--text-sm);
    color: var(--text-muted);
    font-weight: 500;
    margin-left: var(--space-2);
  }
  
  .stat-details {
    display: flex;
    justify-content: space-between;
    padding: var(--space-3);
    background: var(--glass-light);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-lg);
  }
  
  .detail-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-1);
  }
  
  .detail-label {
    font-size: var(--text-xs);
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .detail-value {
    font-family: 'JetBrains Mono', monospace;
    font-size: var(--text-sm);
    font-weight: 600;
    color: var(--text-primary);
  }
  
  .info-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-8);
  }
  
  .info-section {
    animation: slideInUp 0.4s var(--ease-spring);
  }
  
  .info-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--space-4);
  }
  
  .info-header h4 {
    font-size: var(--text-lg);
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }
  
  .presence-status {
    display: flex;
    align-items: center;
    gap: var(--space-2);
  }
  
  .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--emerald-500);
    animation: pulse 2s infinite;
  }
  
  .status-text {
    font-size: var(--text-sm);
    color: var(--emerald-400);
    font-weight: 500;
  }
  
  .presence-details {
    display: flex;
    flex-direction: column;
    gap: var(--space-3);
  }
  
  .presence-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-2) 0;
    border-bottom: 1px solid var(--glass-border-light);
  }
  
  .presence-item:last-child {
    border-bottom: none;
  }
  
  .presence-label {
    font-size: var(--text-sm);
    color: var(--text-muted);
    font-weight: 500;
  }
  
  .presence-value {
    font-family: 'JetBrains Mono', monospace;
    font-size: var(--text-sm);
    color: var(--text-primary);
    font-weight: 600;
  }
  
  .queue-controls {
    display: flex;
    gap: var(--space-2);
  }
  
  .btn.mini {
    padding: var(--space-1) var(--space-2);
    font-size: var(--text-xs);
    border-radius: var(--radius-md);
  }
  
  .queue-metrics {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-4);
  }
  
  .queue-metric {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
  }
  
  .metric-label {
    font-size: var(--text-xs);
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .metric-value {
    font-family: 'JetBrains Mono', monospace;
    font-size: var(--text-lg);
    font-weight: 700;
    color: var(--text-primary);
  }
  
  .queue-health {
    color: var(--emerald-400);
  }
  
  .progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-2);
  }
  
  .progress-label {
    font-size: var(--text-sm);
    color: var(--text-muted);
  }
  
  .progress-percentage {
    font-family: 'JetBrains Mono', monospace;
    font-size: var(--text-sm);
    font-weight: 600;
    color: var(--primary-400);
  }
  
  .progress-bar {
    height: 8px;
    background: var(--glass-medium);
    border-radius: var(--radius-full);
    overflow: hidden;
  }
  
  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-500), var(--primary-400));
    border-radius: var(--radius-full);
    transition: width var(--duration-500) var(--ease-out);
  }
  
  .processes-header,
  .services-header,
  .logs-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--space-4);
  }
  
  .processes-header h4,
  .services-header h4,
  .logs-header h4 {
    font-size: var(--text-lg);
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }
  
  .processes-controls,
  .services-controls,
  .logs-controls {
    display: flex;
    gap: var(--space-3);
    align-items: center;
  }
  
  .search-box {
    position: relative;
    display: flex;
    align-items: center;
    gap: var(--space-2);
    background: var(--glass-medium);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border);
    border-radius: var(--radius-lg);
    padding: var(--space-2) var(--space-3);
  }
  
  .search-box input {
    background: transparent;
    border: none;
    outline: none;
    color: var(--text-primary);
    font-size: var(--text-sm);
    min-width: 200px;
  }
  
  .search-box svg {
    color: var(--text-muted);
  }
  
  .data-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .data-table th,
  .data-table td {
    padding: var(--space-3) var(--space-4);
    text-align: left;
    border-bottom: 1px solid var(--glass-border-light);
  }
  
  .data-table th {
    font-size: var(--text-sm);
    font-weight: 600;
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    background: var(--glass-light);
  }
  
  .data-table td {
    font-size: var(--text-sm);
    color: var(--text-primary);
  }
  
  .data-table tr:hover {
    background: var(--glass-medium);
  }
  
  .services-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: var(--space-4);
    margin-top: var(--space-4);
  }
  
  .service-card {
    background: var(--glass-medium);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-2xl);
    padding: var(--space-5);
    transition: all var(--duration-200) var(--ease-out);
  }
  
  .service-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }
  
  .service-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--space-3);
  }
  
  .service-name {
    font-weight: 600;
    color: var(--text-primary);
    font-size: var(--text-base);
  }
  
  .service-status {
    padding: var(--space-1) var(--space-2);
    border-radius: var(--radius-md);
    font-size: var(--text-xs);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .service-status.running {
    background: var(--emerald-500/20);
    color: var(--emerald-400);
  }
  
  .service-status.stopped {
    background: var(--red-500/20);
    color: var(--red-400);
  }
  
  .logs-container {
    font-family: 'JetBrains Mono', monospace;
    font-size: var(--text-sm);
    line-height: 1.4;
  }
  
  .log-entry {
    display: flex;
    gap: var(--space-3);
    padding: var(--space-2) 0;
    border-bottom: 1px solid var(--glass-border-light);
  }
  
  .log-timestamp {
    color: var(--text-muted);
    flex-shrink: 0;
    width: 100px;
  }
  
  .log-level {
    flex-shrink: 0;
    width: 60px;
    font-weight: 600;
    text-transform: uppercase;
  }
  
  .log-level.error {
    color: var(--red-400);
  }
  
  .log-level.warn {
    color: var(--amber-400);
  }
  
  .log-level.info {
    color: var(--blue-400);
  }
  
  .log-level.debug {
    color: var(--gray-400);
  }
  
  .log-message {
    flex: 1;
    color: var(--text-primary);
  }
  
  .emergency-header {
    margin-bottom: var(--space-6);
  }
  
  .emergency-actions {
    display: flex;
    gap: var(--space-4);
    flex-wrap: wrap;
  }
  
  .btn.danger {
    background: var(--red-500/20);
    color: var(--red-400);
    border: 1px solid var(--red-500/30);
  }
  
  .btn.danger:hover {
    background: var(--red-500/30);
    border-color: var(--red-500/50);
    color: var(--red-300);
  }
  
  .btn.warning {
    background: var(--amber-500/20);
    color: var(--amber-400);
    border: 1px solid var(--amber-500/30);
  }
  
  .btn.warning:hover {
    background: var(--amber-500/30);
    border-color: var(--amber-500/50);
    color: var(--amber-300);
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }
  
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @media (max-width: 1024px) {
    .system-stats-grid {
      grid-template-columns: 1fr 1fr;
    }
    
    .info-grid {
      grid-template-columns: 1fr;
      gap: var(--space-6);
    }
    
    .emergency-actions {
      display: grid;
      grid-template-columns: 1fr 1fr;
    }
  }
  
  @media (max-width: 768px) {
    .system-stats-grid {
      grid-template-columns: 1fr;
    }
    
    .system-controls,
    .processes-controls,
    .services-controls,
    .logs-controls {
      flex-direction: column;
      gap: var(--space-2);
    }
    
    .queue-metrics {
      grid-template-columns: 1fr;
    }
    
    .emergency-actions {
      grid-template-columns: 1fr;
    }
    
    .search-box input {
      min-width: 150px;
    }
  }
</style>

<script>
  // Enhanced system administration dashboard
  document.addEventListener('DOMContentLoaded', function() {
    let systemData = {
      uptime: 0,
      actionsDone: 0,
      queued: 0,
      processes: [],
      services: [],
      logs: []
    };
    
    let systemInterval;
    let selectedProcesses = new Set();
    let selectedServices = new Set();
    
    // Initialize system dashboard
    function initializeSystem() {
      generateSystemData();
      updateSystemMetrics();
      loadProcesses();
      loadServices();
      loadSystemLogs();
      startSystemMonitoring();
      console.log('✅ System administration dashboard initialized');
    }
    
    // Generate mock system data
    function generateSystemData() {
      systemData.uptime = Math.floor(Math.random() * 720) + 24; // 1-30 days in hours
      systemData.actionsDone = Math.floor(Math.random() * 50000) + 10000;
      systemData.queued = Math.floor(Math.random() * 50) + 5;
      systemData.successRate = 95 + Math.random() * 4;
      systemData.actionsPerHour = Math.floor(systemData.actionsDone / systemData.uptime);
      systemData.processing = Math.floor(Math.random() * 5) + 1;
      systemData.avgWait = Math.floor(Math.random() * 30) + 10;
      systemData.activeSessions = Math.floor(Math.random() * 100) + 50;
      systemData.storeSize = Math.floor(Math.random() * 50) + 10;
      
      // Bot presence data
      systemData.botGuilds = Math.floor(Math.random() * 500) + 100;
      systemData.botUsers = Math.floor(Math.random() * 50000) + 10000;
      systemData.botChannels = Math.floor(Math.random() * 5000) + 1000;
    }
    
    // Update system metrics display
    function updateSystemMetrics() {
      document.getElementById('sysUptime').textContent = Math.floor(systemData.uptime);
      document.getElementById('sysDone').textContent = systemData.actionsDone.toLocaleString();
      document.getElementById('sysQueued').textContent = systemData.queued;
      
      // Update detailed stats
      const startDate = new Date(Date.now() - systemData.uptime * 3600000);
      document.getElementById('sysStarted').textContent = startDate.toLocaleDateString();
      document.getElementById('sysRestarts').textContent = Math.floor(Math.random() * 5);
      document.getElementById('sysSuccessRate').textContent = systemData.successRate.toFixed(1) + '%';
      document.getElementById('sysActionsPerHour').textContent = systemData.actionsPerHour.toLocaleString();
      document.getElementById('sysProcessing').textContent = systemData.processing;
      document.getElementById('sysAvgWait').textContent = systemData.avgWait + 's';
      document.getElementById('sysActiveSessions').textContent = systemData.activeSessions;
      document.getElementById('sysStoreSize').textContent = systemData.storeSize + 'MB';
      
      // Update bot presence
      document.getElementById('botGuilds').textContent = systemData.botGuilds.toLocaleString();
      document.getElementById('botUsers').textContent = systemData.botUsers.toLocaleString();
      document.getElementById('botChannels').textContent = systemData.botChannels.toLocaleString();
      
      // Update queue details
      document.getElementById('queuePending').textContent = systemData.queued;
      document.getElementById('queueRate').textContent = Math.floor(systemData.actionsPerHour / 60);
      document.getElementById('queueWaitTime').textContent = systemData.avgWait;
      
      // Update queue progress
      const progress = Math.max(10, 100 - (systemData.queued / 100 * 100));
      document.getElementById('queueProgress').textContent = Math.floor(progress) + '%';
      document.querySelector('.progress-fill').style.width = progress + '%';
    }
    
    // Load system processes
    function loadProcesses() {
      const processNames = [
  'mlvs.me Core', 'Dashboard Server', 'Database Manager', 'API Gateway',
        'Cache Manager', 'Log Processor', 'Task Scheduler', 'Backup Service',
        'Monitoring Agent', 'Security Scanner'
      ];
      
      systemData.processes = processNames.map((name, index) => ({
        id: index + 1,
        name: name,
        pid: 1000 + index * 100 + Math.floor(Math.random() * 100),
        cpu: (Math.random() * 25).toFixed(1),
        memory: Math.floor(Math.random() * 200) + 50,
        status: Math.random() > 0.1 ? 'Running' : 'Stopped',
        uptime: Math.floor(Math.random() * systemData.uptime) + 1
      }));
      
      renderProcessesTable();
    }
    
    // Render processes table
    function renderProcessesTable() {
      const tbody = document.getElementById('processesTableBody');
      tbody.innerHTML = '';
      
      systemData.processes.forEach(process => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td><input type="checkbox" value="${process.id}" class="process-checkbox"></td>
          <td><strong>${process.name}</strong></td>
          <td><code>${process.pid}</code></td>
          <td>${process.cpu}%</td>
          <td>${process.memory}MB</td>
          <td><span class="service-status ${process.status.toLowerCase()}">${process.status}</span></td>
          <td>${Math.floor(process.uptime)}h</td>
          <td>
            <button class="btn mini secondary" onclick="restartProcess(${process.id})">Restart</button>
            <button class="btn mini danger" onclick="killProcess(${process.id})">Kill</button>
          </td>
        `;
        tbody.appendChild(row);
      });
      
      // Add event listeners for checkboxes
      document.querySelectorAll('.process-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', updateProcessSelection);
      });
    }
    
    // Load system services
    function loadServices() {
      const serviceNames = [
        'Discord Gateway', 'HTTP Server', 'WebSocket Manager', 'Database Connection',
        'Redis Cache', 'File Storage', 'Email Service', 'Webhook Handler',
        'Backup Scheduler', 'Health Monitor'
      ];
      
      systemData.services = serviceNames.map((name, index) => ({
        id: index + 1,
        name: name,
        status: Math.random() > 0.15 ? 'running' : 'stopped',
  description: `${name} service for mlvs.me system`,
        port: 3000 + index * 10 + Math.floor(Math.random() * 10),
        memory: Math.floor(Math.random() * 100) + 20,
        uptime: Math.floor(Math.random() * systemData.uptime) + 1
      }));
      
      renderServicesGrid();
    }
    
    // Render services grid
    function renderServicesGrid() {
      const grid = document.getElementById('servicesGrid');
      grid.innerHTML = '';
      
      systemData.services.forEach(service => {
        const card = document.createElement('div');
        card.className = 'service-card';
        card.innerHTML = `
          <div class="service-header">
            <div class="service-name">${service.name}</div>
            <div class="service-status ${service.status}">${service.status}</div>
          </div>
          <div class="service-details">
            <p style="font-size: var(--text-sm); color: var(--text-muted); margin-bottom: var(--space-3);">
              ${service.description}
            </p>
            <div style="display: flex; justify-content: space-between; font-size: var(--text-xs); color: var(--text-muted);">
              <span>Port: ${service.port}</span>
              <span>Memory: ${service.memory}MB</span>
              <span>Uptime: ${service.uptime}h</span>
            </div>
          </div>
          <div class="service-actions" style="margin-top: var(--space-4); display: flex; gap: var(--space-2);">
            <button class="btn mini secondary" onclick="toggleService(${service.id})">
              ${service.status === 'running' ? 'Stop' : 'Start'}
            </button>
            <button class="btn mini secondary" onclick="restartService(${service.id})">Restart</button>
          </div>
        `;
        grid.appendChild(card);
      });
    }
    
    // Load system logs
    function loadSystemLogs() {
      const logSources = ['bot', 'dashboard', 'api', 'database'];
      const logLevels = ['info', 'warn', 'error', 'debug'];
      const logMessages = [
        'System started successfully',
        'User authentication completed',
        'Database connection established',
        'Cache cleared successfully',
        'Warning: High memory usage detected',
        'Error: Failed to connect to external service',
        'Debug: Processing queue item',
        'Info: Backup completed successfully'
      ];
      
      systemData.logs = [];
      for (let i = 0; i < 50; i++) {
        const timestamp = new Date(Date.now() - Math.random() * 86400000);
        systemData.logs.push({
          id: i + 1,
          timestamp,
          level: logLevels[Math.floor(Math.random() * logLevels.length)],
          source: logSources[Math.floor(Math.random() * logSources.length)],
          message: logMessages[Math.floor(Math.random() * logMessages.length)]
        });
      }
      
      systemData.logs.sort((a, b) => b.timestamp - a.timestamp);
      renderSystemLogs();
    }
    
    // Render system logs
    function renderSystemLogs() {
      const container = document.getElementById('logsContent');
      container.innerHTML = '';
      
      systemData.logs.forEach(log => {
        const entry = document.createElement('div');
        entry.className = 'log-entry';
        entry.innerHTML = `
          <div class="log-timestamp">${log.timestamp.toLocaleTimeString()}</div>
          <div class="log-level ${log.level}">${log.level}</div>
          <div class="log-source">[${log.source}]</div>
          <div class="log-message">${log.message}</div>
        `;
        container.appendChild(entry);
      });
    }
    
    // Start system monitoring
    function startSystemMonitoring() {
      systemInterval = setInterval(() => {
        // Update dynamic values
        systemData.uptime += 0.001; // Increment uptime slightly
        systemData.actionsDone += Math.floor(Math.random() * 10);
        systemData.queued += Math.floor(Math.random() * 3) - 1;
        systemData.queued = Math.max(0, systemData.queued);
        
        updateSystemMetrics();
      }, 5000);
    }
    
    // Process management functions
    function updateProcessSelection() {
      selectedProcesses.clear();
      document.querySelectorAll('.process-checkbox:checked').forEach(checkbox => {
        selectedProcesses.add(parseInt(checkbox.value));
      });
      
      const hasSelection = selectedProcesses.size > 0;
      document.getElementById('killProcess').disabled = !hasSelection;
      document.getElementById('restartProcess').disabled = !hasSelection;
    }
    
    // Global functions for process/service management
    window.restartProcess = function(processId) {
      const process = systemData.processes.find(p => p.id === processId);
      if (process && confirm(`Are you sure you want to restart ${process.name}?`)) {
        process.uptime = 0;
        process.status = 'Running';
        renderProcessesTable();
        console.log(`Process ${process.name} restarted`);
      }
    };
    
    window.killProcess = function(processId) {
      const process = systemData.processes.find(p => p.id === processId);
      if (process && confirm(`Are you sure you want to kill ${process.name}? This may cause system instability.`)) {
        process.status = 'Stopped';
        renderProcessesTable();
        console.log(`Process ${process.name} killed`);
      }
    };
    
    window.toggleService = function(serviceId) {
      const service = systemData.services.find(s => s.id === serviceId);
      if (service) {
        const newStatus = service.status === 'running' ? 'stopped' : 'running';
        const action = newStatus === 'running' ? 'start' : 'stop';
        
        if (confirm(`Are you sure you want to ${action} ${service.name}?`)) {
          service.status = newStatus;
          if (newStatus === 'running') {
            service.uptime = 0;
          }
          renderServicesGrid();
          console.log(`Service ${service.name} ${action}ed`);
        }
      }
    };
    
    window.restartService = function(serviceId) {
      const service = systemData.services.find(s => s.id === serviceId);
      if (service && confirm(`Are you sure you want to restart ${service.name}?`)) {
        service.status = 'running';
        service.uptime = 0;
        renderServicesGrid();
        console.log(`Service ${service.name} restarted`);
      }
    };
    
    // Event listeners
    document.getElementById('sysRefresh').addEventListener('click', () => {
      updateSystemMetrics();
      loadProcesses();
      loadServices();
      loadSystemLogs();
    });
    
    document.getElementById('selectAllProcesses').addEventListener('change', function() {
      const checkboxes = document.querySelectorAll('.process-checkbox');
      checkboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updateProcessSelection();
    });
    
    document.getElementById('processSearch').addEventListener('input', function() {
      const query = this.value.toLowerCase();
      const rows = document.querySelectorAll('#processesTableBody tr');
      
      rows.forEach(row => {
        const processName = row.cells[1].textContent.toLowerCase();
        row.style.display = processName.includes(query) ? '' : 'none';
      });
    });
    
    // Emergency controls
    document.getElementById('emergencyRestart').addEventListener('click', function() {
      if (confirm('⚠️ EMERGENCY RESTART\n\nThis will restart the entire system immediately. All active connections will be lost.\n\nAre you absolutely sure?')) {
        alert('Emergency restart initiated. System will be back online shortly.');
        console.log('🚨 Emergency system restart initiated');
      }
    });
    
    document.getElementById('emergencyShutdown').addEventListener('click', function() {
      if (confirm('⚠️ EMERGENCY SHUTDOWN\n\nThis will shut down the entire system. Manual intervention will be required to restart.\n\nAre you absolutely sure?')) {
        alert('Emergency shutdown initiated. System going offline.');
        console.log('🚨 Emergency system shutdown initiated');
      }
    });
    
    document.getElementById('forceKillProcesses').addEventListener('click', function() {
      if (confirm('⚠️ FORCE KILL ALL PROCESSES\n\nThis will forcibly terminate all system processes. This may cause data loss.\n\nAre you absolutely sure?')) {
        systemData.processes.forEach(process => {
          process.status = 'Stopped';
        });
        renderProcessesTable();
        console.log('🚨 All processes force killed');
      }
    });
    
    document.getElementById('flushCaches').addEventListener('click', function() {
      if (confirm('Flush all system caches? This may temporarily impact performance.')) {
        alert('All caches have been flushed successfully.');
        console.log('Cache flush completed');
      }
    });
    
    // Initialize dashboard
    initializeSystem();
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (systemInterval) {
        clearInterval(systemInterval);
      }
    });
  });
</script>
