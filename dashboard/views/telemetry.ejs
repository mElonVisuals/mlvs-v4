<!-- ==== ULTRA-MODERN TELEMETRY ANALYTICS DASHBOARD ==== -->
<section class="panel glass" id="secTelemetry">
  <div class="panel-head">
    <h3>
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: var(--space-3);">
        <path d="M3 3v18h18"/>
        <path d="M7 16l4-4 4 4 6-6"/>
      </svg>
      Performance Telemetry
    </h3>
    <div class="panel-actions">
      <div class="telemetry-controls">
        <select id="timeRange" class="control-select">
          <option value="1h">Last Hour</option>
          <option value="6h">Last 6 Hours</option>
          <option value="24h" selected>Last 24 Hours</option>
          <option value="7d">Last 7 Days</option>
        </select>
        <button class="btn small" id="exportData" style="display: flex; align-items: center; gap: var(--space-2);">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
            <polyline points="7,10 12,15 17,10"/>
            <line x1="12" y1="15" x2="12" y2="3"/>
          </svg>
          Export
        </button>
      </div>
      <button class="btn small" id="telRefresh" style="display: flex; align-items: center; gap: var(--space-2);">
        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M23 4v6h-6M1 20v-6h6"/>
          <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
        </svg>
        Refresh
      </button>
    </div>
  </div>
  
  <!-- Real-time Performance Metrics -->
  <div class="telemetry-overview" style="padding: var(--space-6) var(--space-8); border-bottom: 1px solid var(--glass-border-light); background: var(--glass-light);">
    <div class="metrics-grid">
      <div class="metric-card">
        <div class="metric-header">
          <div class="metric-icon latency">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"/>
              <polyline points="12,6 12,12 16,14"/>
            </svg>
          </div>
          <div class="metric-info">
            <div class="metric-label">Latency</div>
            <div class="metric-value" id="telLatency">—</div>
            <div class="metric-unit">ms</div>
          </div>
        </div>
        <div class="metric-stats">
          <div class="stat-item">
            <span class="stat-label">Avg</span>
            <span class="stat-value" id="telLatAvg">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">p95</span>
            <span class="stat-value" id="telLatP95">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">p99</span>
            <span class="stat-value" id="telLatP99">—</span>
          </div>
        </div>
        <div class="metric-sparkline" id="latencySparkline"></div>
      </div>
      
      <div class="metric-card">
        <div class="metric-header">
          <div class="metric-icon memory">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
              <line x1="8" y1="21" x2="16" y2="21"/>
              <line x1="12" y1="17" x2="12" y2="21"/>
            </svg>
          </div>
          <div class="metric-info">
            <div class="metric-label">Memory</div>
            <div class="metric-value" id="telMemory">—</div>
            <div class="metric-unit">MB</div>
          </div>
        </div>
        <div class="metric-stats">
          <div class="stat-item">
            <span class="stat-label">Used</span>
            <span class="stat-value" id="telMemUsed">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Free</span>
            <span class="stat-value" id="telMemFree">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Peak</span>
            <span class="stat-value" id="telMemPeak">—</span>
          </div>
        </div>
        <div class="metric-sparkline" id="memorySparkline"></div>
      </div>
      
      <div class="metric-card">
        <div class="metric-header">
          <div class="metric-icon cpu">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="4" y="4" width="16" height="16" rx="2" ry="2"/>
              <rect x="9" y="9" width="6" height="6"/>
              <line x1="9" y1="1" x2="9" y2="4"/>
              <line x1="15" y1="1" x2="15" y2="4"/>
              <line x1="9" y1="20" x2="9" y2="23"/>
              <line x1="15" y1="20" x2="15" y2="23"/>
              <line x1="20" y1="9" x2="23" y2="9"/>
              <line x1="20" y1="14" x2="23" y2="14"/>
              <line x1="1" y1="9" x2="4" y2="9"/>
              <line x1="1" y1="14" x2="4" y2="14"/>
            </svg>
          </div>
          <div class="metric-info">
            <div class="metric-label">CPU Usage</div>
            <div class="metric-value" id="telCpu">—</div>
            <div class="metric-unit">%</div>
          </div>
        </div>
        <div class="metric-stats">
          <div class="stat-item">
            <span class="stat-label">Avg</span>
            <span class="stat-value" id="telCpuAvg">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Peak</span>
            <span class="stat-value" id="telCpuPeak">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Cores</span>
            <span class="stat-value" id="telCpuCores">—</span>
          </div>
        </div>
        <div class="metric-sparkline" id="cpuSparkline"></div>
      </div>
      
      <div class="metric-card">
        <div class="metric-header">
          <div class="metric-icon network">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="16" y="16" width="6" height="6" rx="1"/>
              <rect x="2" y="16" width="6" height="6" rx="1"/>
              <rect x="9" y="2" width="6" height="6" rx="1"/>
              <path d="M21 16h-5l-2-3h3L13 5l-3 8h3l-2 3H6"/>
            </svg>
          </div>
          <div class="metric-info">
            <div class="metric-label">Network</div>
            <div class="metric-value" id="telNetwork">—</div>
            <div class="metric-unit">KB/s</div>
          </div>
        </div>
        <div class="metric-stats">
          <div class="stat-item">
            <span class="stat-label">In</span>
            <span class="stat-value" id="telNetIn">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Out</span>
            <span class="stat-value" id="telNetOut">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Total</span>
            <span class="stat-value" id="telNetTotal">—</span>
          </div>
        </div>
        <div class="metric-sparkline" id="networkSparkline"></div>
      </div>
      
      <div class="metric-card">
        <div class="metric-header">
          <div class="metric-icon requests">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 20V10"/>
              <path d="M18 20V4"/>
              <path d="M6 20v-4"/>
            </svg>
          </div>
          <div class="metric-info">
            <div class="metric-label">Requests</div>
            <div class="metric-value" id="telRequests">—</div>
            <div class="metric-unit">/min</div>
          </div>
        </div>
        <div class="metric-stats">
          <div class="stat-item">
            <span class="stat-label">Success</span>
            <span class="stat-value" id="telReqSuccess">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Errors</span>
            <span class="stat-value" id="telReqErrors">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Rate</span>
            <span class="stat-value" id="telReqRate">—</span>
          </div>
        </div>
        <div class="metric-sparkline" id="requestsSparkline"></div>
      </div>
      
      <div class="metric-card">
        <div class="metric-header">
          <div class="metric-icon connections">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"/>
              <circle cx="9" cy="7" r="4"/>
              <path d="M23 21v-2a4 4 0 0 0-3-3.87"/>
              <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
            </svg>
          </div>
          <div class="metric-info">
            <div class="metric-label">Connections</div>
            <div class="metric-value" id="telConnections">—</div>
            <div class="metric-unit">active</div>
          </div>
        </div>
        <div class="metric-stats">
          <div class="stat-item">
            <span class="stat-label">WebSocket</span>
            <span class="stat-value" id="telWsConnections">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">HTTP</span>
            <span class="stat-value" id="telHttpConnections">—</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Total</span>
            <span class="stat-value" id="telTotalConnections">—</span>
          </div>
        </div>
        <div class="metric-sparkline" id="connectionsSparkline"></div>
      </div>
    </div>
  </div>
  
  <!-- Detailed Performance Charts -->
  <div class="telemetry-charts" style="padding: var(--space-8);">
    <div class="charts-grid">
      <div class="chart-panel">
        <div class="chart-header">
          <h4>Response Time Distribution</h4>
          <div class="chart-controls">
            <button class="chart-btn active" data-metric="latency">Latency</button>
            <button class="chart-btn" data-metric="throughput">Throughput</button>
          </div>
        </div>
        <div class="chart-container">
          <canvas id="responseChart" width="400" height="200"></canvas>
        </div>
      </div>
      
      <div class="chart-panel">
        <div class="chart-header">
          <h4>Resource Utilization</h4>
          <div class="chart-controls">
            <button class="chart-btn active" data-resource="all">All</button>
            <button class="chart-btn" data-resource="cpu">CPU</button>
            <button class="chart-btn" data-resource="memory">Memory</button>
          </div>
        </div>
        <div class="chart-container">
          <canvas id="resourceChart" width="400" height="200"></canvas>
        </div>
      </div>
      
      <div class="chart-panel full-width">
        <div class="chart-header">
          <h4>Performance Timeline</h4>
          <div class="chart-controls">
            <div class="time-controls">
              <button class="time-btn" data-time="1h">1H</button>
              <button class="time-btn active" data-time="6h">6H</button>
              <button class="time-btn" data-time="24h">24H</button>
              <button class="time-btn" data-time="7d">7D</button>
            </div>
          </div>
        </div>
        <div class="chart-container timeline">
          <canvas id="timelineChart" width="800" height="300"></canvas>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Performance Alerts -->
  <section class="panel glass alerts-panel" style="margin-top: var(--space-8);">
    <div class="panel-head">
      <h3>
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: var(--space-3);">
          <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
          <line x1="12" y1="9" x2="12" y2="13"/>
          <line x1="12" y1="17" x2="12.01" y2="17"/>
        </svg>
        Performance Alerts
      </h3>
      <div class="alerts-controls">
        <span class="alert-count">
          <span id="activeAlerts">0</span> active alerts
        </span>
        <button class="btn small" id="clearAlerts">Clear All</button>
      </div>
    </div>
    
    <div class="alerts-container" style="padding: var(--space-6) var(--space-8);">
      <ul id="alertsList" class="alerts-list">
        <!-- Alerts will be populated here -->
      </ul>
      
      <!-- No Alerts State -->
      <div class="alerts-empty" id="alertsEmpty">
        <div class="empty-icon">
          <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
            <path d="M9 12l2 2 4-4"/>
            <circle cx="12" cy="12" r="10"/>
          </svg>
        </div>
        <h3>All Systems Normal</h3>
        <p>No performance alerts detected. All metrics are within acceptable thresholds.</p>
      </div>
    </div>
  </section>
</section>

<style>
  /* ==== TELEMETRY DASHBOARD SPECIFIC STYLES ==== */
  .telemetry-controls {
    display: flex;
    gap: var(--space-3);
    align-items: center;
  }
  
  .control-select {
    background: var(--glass-medium);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border);
    border-radius: var(--radius-lg);
    padding: var(--space-2) var(--space-3);
    color: var(--text-primary);
    font-size: var(--text-sm);
    min-width: 120px;
  }
  
  .telemetry-overview {
    background: var(--glass-light);
    backdrop-filter: blur(8px);
  }
  
  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--space-6);
  }
  
  .metric-card {
    background: var(--glass-medium);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-3xl);
    padding: var(--space-6);
    transition: all var(--duration-300) var(--ease-out);
    animation: slideInUp 0.3s var(--ease-spring);
  }
  
  .metric-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
    background: var(--glass-heavy);
  }
  
  .metric-header {
    display: flex;
    align-items: flex-start;
    gap: var(--space-4);
    margin-bottom: var(--space-5);
  }
  
  .metric-icon {
    width: 48px;
    height: 48px;
    border-radius: var(--radius-2xl);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }
  
  .metric-icon.latency {
    background: linear-gradient(135deg, var(--blue-500/20), var(--blue-600/30));
    color: var(--blue-400);
  }
  
  .metric-icon.memory {
    background: linear-gradient(135deg, var(--emerald-500/20), var(--emerald-600/30));
    color: var(--emerald-400);
  }
  
  .metric-icon.cpu {
    background: linear-gradient(135deg, var(--orange-500/20), var(--orange-600/30));
    color: var(--orange-400);
  }
  
  .metric-icon.network {
    background: linear-gradient(135deg, var(--purple-500/20), var(--purple-600/30));
    color: var(--purple-400);
  }
  
  .metric-icon.requests {
    background: linear-gradient(135deg, var(--pink-500/20), var(--pink-600/30));
    color: var(--pink-400);
  }
  
  .metric-icon.connections {
    background: linear-gradient(135deg, var(--indigo-500/20), var(--indigo-600/30));
    color: var(--indigo-400);
  }
  
  .metric-info {
    flex: 1;
    min-width: 0;
  }
  
  .metric-label {
    font-size: var(--text-sm);
    color: var(--text-muted);
    margin-bottom: var(--space-1);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 500;
  }
  
  .metric-value {
    font-family: 'JetBrains Mono', monospace;
    font-size: var(--text-2xl);
    font-weight: 700;
    color: var(--text-primary);
    line-height: 1;
  }
  
  .metric-unit {
    font-size: var(--text-sm);
    color: var(--text-muted);
    font-weight: 500;
    margin-left: var(--space-2);
  }
  
  .metric-stats {
    display: flex;
    justify-content: space-between;
    margin-bottom: var(--space-4);
    padding: var(--space-3);
    background: var(--glass-light);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-lg);
  }
  
  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-1);
  }
  
  .stat-label {
    font-size: var(--text-xs);
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .stat-value {
    font-family: 'JetBrains Mono', monospace;
    font-size: var(--text-sm);
    font-weight: 600;
    color: var(--text-primary);
  }
  
  .metric-sparkline {
    height: 40px;
    background: var(--glass-light);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-lg);
    overflow: hidden;
    position: relative;
  }
  
  .charts-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-8);
  }
  
  .chart-panel {
    background: var(--glass-light);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-3xl);
    padding: var(--space-6);
    transition: all var(--duration-300) var(--ease-out);
  }
  
  .chart-panel.full-width {
    grid-column: 1 / -1;
  }
  
  .chart-panel:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }
  
  .chart-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--space-5);
  }
  
  .chart-header h4 {
    font-size: var(--text-lg);
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }
  
  .chart-controls {
    display: flex;
    gap: var(--space-2);
  }
  
  .chart-btn,
  .time-btn {
    padding: var(--space-2) var(--space-3);
    background: var(--glass-medium);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border);
    border-radius: var(--radius-md);
    color: var(--text-muted);
    font-size: var(--text-xs);
    cursor: pointer;
    transition: all var(--duration-200) var(--ease-out);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 500;
  }
  
  .chart-btn:hover,
  .time-btn:hover {
    color: var(--text-primary);
    background: var(--glass-heavy);
  }
  
  .chart-btn.active,
  .time-btn.active {
    color: var(--primary-400);
    background: var(--primary-500/10);
    border-color: var(--primary-500/30);
  }
  
  .chart-container {
    position: relative;
    background: var(--glass-medium);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-2xl);
    padding: var(--space-4);
    overflow: hidden;
  }
  
  .chart-container.timeline {
    height: 320px;
  }
  
  .chart-container canvas {
    width: 100%;
    height: 100%;
    border-radius: var(--radius-lg);
  }
  
  .time-controls {
    display: flex;
    gap: var(--space-1);
    background: var(--glass-medium);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border);
    border-radius: var(--radius-lg);
    padding: var(--space-1);
  }
  
  .alerts-panel {
    border: 1px solid var(--glass-border-light);
  }
  
  .alerts-controls {
    display: flex;
    align-items: center;
    gap: var(--space-4);
  }
  
  .alert-count {
    font-size: var(--text-sm);
    color: var(--text-muted);
    font-family: 'JetBrains Mono', monospace;
  }
  
  .alert-count span {
    color: var(--primary-400);
    font-weight: 700;
  }
  
  .alerts-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: var(--space-3);
  }
  
  .alert-item {
    display: flex;
    align-items: flex-start;
    gap: var(--space-4);
    padding: var(--space-4);
    background: var(--glass-light);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-2xl);
    transition: all var(--duration-200) var(--ease-out);
    animation: slideInAlert 0.3s var(--ease-spring);
  }
  
  .alert-item:hover {
    background: var(--glass-medium);
    transform: translateX(4px);
  }
  
  .alert-item.warning {
    border-left: 4px solid var(--amber-500);
  }
  
  .alert-item.error {
    border-left: 4px solid var(--red-500);
  }
  
  .alert-item.critical {
    border-left: 4px solid var(--red-600);
    background: var(--red-500/05);
  }
  
  .alert-icon {
    width: 32px;
    height: 32px;
    border-radius: var(--radius-lg);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }
  
  .alert-icon.warning {
    background: var(--amber-500/20);
    color: var(--amber-400);
  }
  
  .alert-icon.error {
    background: var(--red-500/20);
    color: var(--red-400);
  }
  
  .alert-content {
    flex: 1;
    min-width: 0;
  }
  
  .alert-title {
    font-weight: 600;
    color: var(--text-primary);
    font-size: var(--text-sm);
    margin-bottom: var(--space-1);
  }
  
  .alert-description {
    font-size: var(--text-sm);
    color: var(--text-tertiary);
    line-height: 1.4;
    margin-bottom: var(--space-2);
  }
  
  .alert-meta {
    display: flex;
    gap: var(--space-4);
    font-size: var(--text-xs);
    color: var(--text-muted);
  }
  
  .alert-actions {
    display: flex;
    gap: var(--space-2);
    flex-shrink: 0;
  }
  
  .alert-btn {
    padding: var(--space-1) var(--space-2);
    background: var(--glass-medium);
    border: 1px solid var(--glass-border);
    border-radius: var(--radius-md);
    color: var(--text-muted);
    font-size: var(--text-xs);
    cursor: pointer;
    transition: all var(--duration-200) var(--ease-out);
  }
  
  .alert-btn:hover {
    color: var(--text-primary);
    background: var(--glass-heavy);
  }
  
  .alerts-empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: var(--space-20) var(--space-8);
    text-align: center;
  }
  
  .empty-icon {
    margin-bottom: var(--space-6);
    color: var(--emerald-500);
    opacity: 0.7;
  }
  
  .alerts-empty h3 {
    font-size: var(--text-xl);
    color: var(--text-primary);
    margin-bottom: var(--space-3);
  }
  
  .alerts-empty p {
    color: var(--text-tertiary);
    margin-bottom: var(--space-6);
    max-width: 400px;
  }
  
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes slideInAlert {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  @media (max-width: 768px) {
    .metrics-grid {
      grid-template-columns: 1fr;
    }
    
    .charts-grid {
      grid-template-columns: 1fr;
    }
    
    .telemetry-controls {
      flex-direction: column;
      gap: var(--space-2);
    }
    
    .alerts-controls {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-2);
    }
    
    .metric-stats {
      flex-direction: column;
      gap: var(--space-2);
    }
    
    .stat-item {
      flex-direction: row;
      justify-content: space-between;
    }
  }
</style>

<script>
  // Enhanced telemetry dashboard with real-time metrics and visualization
  document.addEventListener('DOMContentLoaded', function() {
    let telemetryData = {
      latency: [],
      memory: [],
      cpu: [],
      network: [],
      requests: [],
      connections: []
    };
    
    let alerts = [];
    let telemetryInterval;
    
    const metrics = {
      latency: document.getElementById('telLatency'),
      memory: document.getElementById('telMemory'),
      cpu: document.getElementById('telCpu'),
      network: document.getElementById('telNetwork'),
      requests: document.getElementById('telRequests'),
      connections: document.getElementById('telConnections')
    };
    
    // Initialize telemetry monitoring
    function initializeTelemetry() {
      generateHistoricalData();
      updateMetrics();
      renderSparklines();
      startRealTimeUpdates();
      console.log('✅ Telemetry dashboard initialized');
    }
    
    // Generate historical data for charts
    function generateHistoricalData() {
      const now = Date.now();
      const points = 100;
      
      for (let i = points - 1; i >= 0; i--) {
        const timestamp = now - (i * 30000); // 30 second intervals
        
        telemetryData.latency.push({
          timestamp,
          value: Math.random() * 100 + 50,
          p95: Math.random() * 150 + 100,
          p99: Math.random() * 200 + 150
        });
        
        telemetryData.memory.push({
          timestamp,
          value: Math.random() * 200 + 300,
          used: Math.random() * 150 + 200,
          free: Math.random() * 100 + 150
        });
        
        telemetryData.cpu.push({
          timestamp,
          value: Math.random() * 60 + 20,
          cores: 8
        });
        
        telemetryData.network.push({
          timestamp,
          value: Math.random() * 50 + 10,
          in: Math.random() * 30 + 5,
          out: Math.random() * 20 + 5
        });
        
        telemetryData.requests.push({
          timestamp,
          value: Math.random() * 100 + 50,
          success: Math.random() * 95 + 90,
          errors: Math.random() * 5
        });
        
        telemetryData.connections.push({
          timestamp,
          value: Math.random() * 50 + 20,
          websocket: Math.random() * 30 + 10,
          http: Math.random() * 20 + 10
        });
      }
    }
    
    // Update current metrics display
    function updateMetrics() {
      const latest = {
        latency: telemetryData.latency[telemetryData.latency.length - 1],
        memory: telemetryData.memory[telemetryData.memory.length - 1],
        cpu: telemetryData.cpu[telemetryData.cpu.length - 1],
        network: telemetryData.network[telemetryData.network.length - 1],
        requests: telemetryData.requests[telemetryData.requests.length - 1],
        connections: telemetryData.connections[telemetryData.connections.length - 1]
      };
      
      if (latest.latency) {
        metrics.latency.textContent = Math.round(latest.latency.value);
        document.getElementById('telLatAvg').textContent = calculateAverage('latency') + 'ms';
        document.getElementById('telLatP95').textContent = Math.round(latest.latency.p95) + 'ms';
        document.getElementById('telLatP99').textContent = Math.round(latest.latency.p99) + 'ms';
      }
      
      if (latest.memory) {
        metrics.memory.textContent = Math.round(latest.memory.value);
        document.getElementById('telMemUsed').textContent = Math.round(latest.memory.used) + 'MB';
        document.getElementById('telMemFree').textContent = Math.round(latest.memory.free) + 'MB';
        document.getElementById('telMemPeak').textContent = getMaxValue('memory') + 'MB';
      }
      
      if (latest.cpu) {
        metrics.cpu.textContent = Math.round(latest.cpu.value);
        document.getElementById('telCpuAvg').textContent = calculateAverage('cpu') + '%';
        document.getElementById('telCpuPeak').textContent = getMaxValue('cpu') + '%';
        document.getElementById('telCpuCores').textContent = latest.cpu.cores;
      }
      
      if (latest.network) {
        metrics.network.textContent = Math.round(latest.network.value);
        document.getElementById('telNetIn').textContent = Math.round(latest.network.in) + 'KB/s';
        document.getElementById('telNetOut').textContent = Math.round(latest.network.out) + 'KB/s';
        document.getElementById('telNetTotal').textContent = Math.round(latest.network.in + latest.network.out) + 'KB/s';
      }
      
      if (latest.requests) {
        metrics.requests.textContent = Math.round(latest.requests.value);
        document.getElementById('telReqSuccess').textContent = Math.round(latest.requests.success) + '%';
        document.getElementById('telReqErrors').textContent = Math.round(latest.requests.errors) + '%';
        document.getElementById('telReqRate').textContent = Math.round(latest.requests.value) + '/min';
      }
      
      if (latest.connections) {
        metrics.connections.textContent = Math.round(latest.connections.value);
        document.getElementById('telWsConnections').textContent = Math.round(latest.connections.websocket);
        document.getElementById('telHttpConnections').textContent = Math.round(latest.connections.http);
        document.getElementById('telTotalConnections').textContent = Math.round(latest.connections.value);
      }
      
      // Check for alerts
      checkPerformanceAlerts(latest);
    }
    
    // Calculate metric averages
    function calculateAverage(metric) {
      const data = telemetryData[metric];
      if (!data.length) return '—';
      
      const sum = data.reduce((acc, point) => acc + point.value, 0);
      return Math.round(sum / data.length);
    }
    
    // Get maximum value for a metric
    function getMaxValue(metric) {
      const data = telemetryData[metric];
      if (!data.length) return '—';
      
      return Math.round(Math.max(...data.map(point => point.value)));
    }
    
    // Render sparkline charts
    function renderSparklines() {
      const sparklines = ['latency', 'memory', 'cpu', 'network', 'requests', 'connections'];
      
      sparklines.forEach(metric => {
        renderSparkline(metric);
      });
    }
    
    // Render individual sparkline
    function renderSparkline(metric) {
      const container = document.getElementById(metric + 'Sparkline');
      const data = telemetryData[metric];
      
      if (!data.length || !container) return;
      
      const width = container.offsetWidth;
      const height = container.offsetHeight;
      const values = data.map(point => point.value);
      const max = Math.max(...values);
      const min = Math.min(...values);
      const range = max - min || 1;
      
      // Clear container
      container.innerHTML = '';
      
      // Create SVG
      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.setAttribute('width', width);
      svg.setAttribute('height', height);
      svg.style.cssText = 'position: absolute; top: 0; left: 0;';
      
      // Create path
      const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      const stepX = width / (values.length - 1);
      
      let pathData = '';
      values.forEach((value, index) => {
        const x = index * stepX;
        const y = height - ((value - min) / range) * height;
        
        if (index === 0) {
          pathData += `M ${x} ${y}`;
        } else {
          pathData += ` L ${x} ${y}`;
        }
      });
      
      path.setAttribute('d', pathData);
      path.setAttribute('stroke', getMetricColor(metric));
      path.setAttribute('stroke-width', '2');
      path.setAttribute('fill', 'none');
      path.setAttribute('stroke-linecap', 'round');
      path.setAttribute('stroke-linejoin', 'round');
      
      // Add gradient fill
      const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
      const gradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient');
      gradient.setAttribute('id', `gradient-${metric}`);
      gradient.setAttribute('x1', '0%');
      gradient.setAttribute('y1', '0%');
      gradient.setAttribute('x2', '0%');
      gradient.setAttribute('y2', '100%');
      
      const stop1 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
      stop1.setAttribute('offset', '0%');
      stop1.setAttribute('stop-color', getMetricColor(metric));
      stop1.setAttribute('stop-opacity', '0.3');
      
      const stop2 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
      stop2.setAttribute('offset', '100%');
      stop2.setAttribute('stop-color', getMetricColor(metric));
      stop2.setAttribute('stop-opacity', '0');
      
      gradient.appendChild(stop1);
      gradient.appendChild(stop2);
      defs.appendChild(gradient);
      
      // Create area path
      const areaPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      const areaData = pathData + ` L ${width} ${height} L 0 ${height} Z`;
      areaPath.setAttribute('d', areaData);
      areaPath.setAttribute('fill', `url(#gradient-${metric})`);
      
      svg.appendChild(defs);
      svg.appendChild(areaPath);
      svg.appendChild(path);
      container.appendChild(svg);
    }
    
    // Get color for metric type
    function getMetricColor(metric) {
      const colors = {
        latency: 'rgb(59, 130, 246)', // blue
        memory: 'rgb(16, 185, 129)', // emerald
        cpu: 'rgb(249, 115, 22)', // orange
        network: 'rgb(147, 51, 234)', // purple
        requests: 'rgb(236, 72, 153)', // pink
        connections: 'rgb(99, 102, 241)' // indigo
      };
      return colors[metric] || 'rgb(156, 163, 175)';
    }
    
    // Check for performance alerts
    function checkPerformanceAlerts(latest) {
      // CPU alert
      if (latest.cpu.value > 80) {
        addAlert('High CPU Usage', `CPU usage is at ${Math.round(latest.cpu.value)}%, which exceeds the 80% threshold.`, 'warning', 'cpu');
      }
      
      // Memory alert
      if (latest.memory.value > 450) {
        addAlert('High Memory Usage', `Memory usage is at ${Math.round(latest.memory.value)}MB, approaching system limits.`, 'error', 'memory');
      }
      
      // Latency alert
      if (latest.latency.p99 > 300) {
        addAlert('High Latency Detected', `99th percentile latency is ${Math.round(latest.latency.p99)}ms, users may experience delays.`, 'warning', 'latency');
      }
      
      // Low success rate alert
      if (latest.requests.success < 95) {
        addAlert('Low Success Rate', `Request success rate has dropped to ${Math.round(latest.requests.success)}%, indicating potential issues.`, 'error', 'requests');
      }
    }
    
    // Add performance alert
    function addAlert(title, description, severity, metric) {
      const existingAlert = alerts.find(alert => alert.title === title);
      if (existingAlert) return; // Don't duplicate alerts
      
      const alert = {
        id: Date.now(),
        title,
        description,
        severity,
        metric,
        timestamp: new Date(),
        acknowledged: false
      };
      
      alerts.unshift(alert);
      if (alerts.length > 10) alerts.pop(); // Keep only recent alerts
      
      updateAlertsDisplay();
    }
    
    // Update alerts display
    function updateAlertsDisplay() {
      const activeAlerts = alerts.filter(alert => !alert.acknowledged);
      document.getElementById('activeAlerts').textContent = activeAlerts.length;
      
      const alertsList = document.getElementById('alertsList');
      const alertsEmpty = document.getElementById('alertsEmpty');
      
      if (activeAlerts.length === 0) {
        alertsList.style.display = 'none';
        alertsEmpty.style.display = 'flex';
      } else {
        alertsEmpty.style.display = 'none';
        alertsList.style.display = 'flex';
        
        alertsList.innerHTML = '';
        activeAlerts.forEach(alert => {
          const item = createAlertItem(alert);
          alertsList.appendChild(item);
        });
      }
    }
    
    // Create alert item element
    function createAlertItem(alert) {
      const li = document.createElement('li');
      li.className = `alert-item ${alert.severity}`;
      
      const iconSvg = alert.severity === 'warning' 
        ? '<path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/><line x1="12" y1="9" x2="12" y2="13"/><line x1="12" y1="17" x2="12.01" y2="17"/>'
        : '<circle cx="12" cy="12" r="10"/><line x1="15" y1="9" x2="9" y2="15"/><line x1="9" y1="9" x2="15" y2="15"/>';
      
      li.innerHTML = `
        <div class="alert-icon ${alert.severity}">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            ${iconSvg}
          </svg>
        </div>
        <div class="alert-content">
          <div class="alert-title">${alert.title}</div>
          <div class="alert-description">${alert.description}</div>
          <div class="alert-meta">
            <span>Metric: ${alert.metric}</span>
            <span>Time: ${alert.timestamp.toLocaleTimeString()}</span>
          </div>
        </div>
        <div class="alert-actions">
          <button class="alert-btn" onclick="acknowledgeAlert(${alert.id})">Acknowledge</button>
          <button class="alert-btn" onclick="dismissAlert(${alert.id})">Dismiss</button>
        </div>
      `;
      
      return li;
    }
    
    // Start real-time updates
    function startRealTimeUpdates() {
      telemetryInterval = setInterval(() => {
        // Add new data points
        const now = Date.now();
        
        Object.keys(telemetryData).forEach(metric => {
          const lastValue = telemetryData[metric][telemetryData[metric].length - 1];
          let newValue = lastValue ? lastValue.value + (Math.random() - 0.5) * 20 : Math.random() * 100;
          
          // Keep values in reasonable ranges
          const ranges = {
            latency: [20, 200],
            memory: [200, 500],
            cpu: [10, 90],
            network: [5, 60],
            requests: [30, 150],
            connections: [10, 80]
          };
          
          const [min, max] = ranges[metric] || [0, 100];
          newValue = Math.max(min, Math.min(max, newValue));
          
          const dataPoint = { timestamp: now, value: newValue };
          
          // Add metric-specific properties
          if (metric === 'latency') {
            dataPoint.p95 = newValue * 1.5;
            dataPoint.p99 = newValue * 2;
          } else if (metric === 'memory') {
            dataPoint.used = newValue * 0.7;
            dataPoint.free = newValue * 0.3;
          } else if (metric === 'cpu') {
            dataPoint.cores = 8;
          } else if (metric === 'network') {
            dataPoint.in = newValue * 0.6;
            dataPoint.out = newValue * 0.4;
          } else if (metric === 'requests') {
            dataPoint.success = 100 - (Math.random() * 5);
            dataPoint.errors = Math.random() * 5;
          } else if (metric === 'connections') {
            dataPoint.websocket = newValue * 0.6;
            dataPoint.http = newValue * 0.4;
          }
          
          telemetryData[metric].push(dataPoint);
          
          // Keep only last 100 points
          if (telemetryData[metric].length > 100) {
            telemetryData[metric].shift();
          }
        });
        
        updateMetrics();
        renderSparklines();
      }, 3000);
    }
    
    // Global alert management functions
    window.acknowledgeAlert = function(alertId) {
      const alert = alerts.find(a => a.id === alertId);
      if (alert) {
        alert.acknowledged = true;
        updateAlertsDisplay();
      }
    };
    
    window.dismissAlert = function(alertId) {
      const index = alerts.findIndex(a => a.id === alertId);
      if (index !== -1) {
        alerts.splice(index, 1);
        updateAlertsDisplay();
      }
    };
    
    // Event listeners
    document.getElementById('telRefresh').addEventListener('click', () => {
      updateMetrics();
      renderSparklines();
      updateAlertsDisplay();
    });
    
    document.getElementById('clearAlerts').addEventListener('click', () => {
      alerts.forEach(alert => alert.acknowledged = true);
      updateAlertsDisplay();
    });
    
    document.getElementById('exportData').addEventListener('click', () => {
      const exportData = {
        timestamp: new Date().toISOString(),
        metrics: telemetryData,
        alerts: alerts
      };
      
      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `telemetry-export-${Date.now()}.json`;
      a.click();
      URL.revokeObjectURL(url);
    });
    
    // Initialize dashboard
    initializeTelemetry();
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (telemetryInterval) {
        clearInterval(telemetryInterval);
      }
    });
  });
</script>
