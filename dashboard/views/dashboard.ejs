<!-- Overview Banner -->
<div class="overview-banner">
  <div class="overview-inner">
    <div class="overview-left">
      <div class="overview-badge">Dashboard</div>
      <h1 class="overview-title">Bot Dashboard Overview</h1>
      <p class="overview-subtitle">Realâ€‘time status, performance metrics & control center</p>
      <div class="overview-live">
        <span class="status-dot pulse" id="overview-status-dot"></span>
        <span class="live-text" id="overview-status-text">Online</span>
      </div>
    </div>
    <div class="overview-right">
      <div class="overview-stats">
        <div class="overview-stat">
          <span class="ov-number" id="ov-guild-count">0</span>
          <span class="ov-label">Guilds</span>
        </div>
        <div class="overview-stat">
          <span class="ov-number" id="ov-user-count">0</span>
          <span class="ov-label">Users</span>
        </div>
        <div class="overview-stat">
          <span class="ov-number" id="ov-commands-today">0</span>
          <span class="ov-label">Cmds Today</span>
        </div>
      </div>
    </div>
  </div>
  <div class="overview-glow"></div>
</div>

<!-- Main Dashboard Overview -->
<div class="dashboard-grid">
  <!-- Welcome Card -->
  <div class="card welcome-card">
    <div class="card-header">
  <h2 class="card-title">Welcome back, <%= (typeof user !== 'undefined' && user && user.username) ? user.username : 'User' %>!</h2>
  <div class="card-icon"><span class="ui-icon" data-icon="hand-wave"></span></div>
    </div>
    <div class="card-content">
      <p class="welcome-text">Your bot is running smoothly. Here's what's happening today.</p>
      <div class="quick-stats">
        <div class="quick-stat">
          <span class="stat-number" id="total-commands">0</span>
          <span class="stat-label">Commands Today</span>
        </div>
        <div class="quick-stat">
          <span class="stat-number" id="active-users">0</span>
          <span class="stat-label">Active Users</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Bot Status Card -->
  <div class="card status-card">
    <div class="card-header">
      <h3 class="card-title">Bot Status</h3>
      <div class="status-indicator online"></div>
    </div>
    <div class="card-content">
      <div class="status-info">
        <div class="status-row">
          <span class="status-label">Status</span>
          <span class="status-value online">Online</span>
        </div>
        <div class="status-row">
          <span class="status-label">Uptime</span>
          <span class="status-value" id="bot-uptime">Loading...</span>
        </div>
        <div class="status-row">
          <span class="status-label">Latency</span>
          <span class="status-value" id="bot-latency">0ms</span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Performance Metrics -->
<div class="dashboard-grid">
  <!-- Server Stats -->
  <div class="card metric-card">
    <div class="card-header">
      <h3 class="card-title">Server Statistics</h3>
  <div class="card-icon"><span class="ui-icon" data-icon="guilds"></span></div>
    </div>
    <div class="card-content">
      <div class="metric-row">
        <div class="metric-item">
          <span class="metric-value" id="guild-count">0</span>
          <span class="metric-label">Guilds</span>
        </div>
        <div class="metric-item">
          <span class="metric-value" id="user-count">0</span>
          <span class="metric-label">Users</span>
        </div>
      </div>
      <div class="metric-trend positive">
        <span>â†— +5 new servers this week</span>
      </div>
    </div>
  </div>

  <!-- System Performance -->
  <div class="card metric-card">
    <div class="card-header">
      <h3 class="card-title">System Performance</h3>
  <div class="card-icon"><span class="ui-icon" data-icon="performance"></span></div>
    </div>
    <div class="card-content">
      <div class="metric-row">
        <div class="metric-item">
          <span class="metric-value" id="cpu-usage">0%</span>
          <span class="metric-label">CPU</span>
        </div>
        <div class="metric-item">
          <span class="metric-value" id="memory-usage">0MB</span>
          <span class="metric-label">Memory</span>
        </div>
      </div>
      <div class="performance-chart">
        <div class="sparkline" id="performance-chart"></div>
      </div>
    </div>
  </div>

  <!-- Commands Activity -->
  <div class="card metric-card">
    <div class="card-header">
      <h3 class="card-title">Commands Activity</h3>
  <div class="card-icon"><span class="ui-icon" data-icon="commands"></span></div>
    </div>
    <div class="card-content">
      <div class="metric-row">
        <div class="metric-item">
          <span class="metric-value" id="commands-hour">0</span>
          <span class="metric-label">Per Hour</span>
        </div>
        <div class="metric-item">
          <span class="metric-value" id="most-used">loading</span>
          <span class="metric-label">Most Used</span>
        </div>
      </div>
      <div class="activity-chart">
        <div class="sparkline" id="activity-chart"></div>
      </div>
    </div>
  </div>
</div>

<!-- Recent Activity -->
<div class="card activity-card">
  <div class="card-header">
    <h3 class="card-title">Recent Activity</h3>
    <button class="btn btn-secondary" id="refresh-activity">
      <span>Refresh</span>
    </button>
  </div>
  <div class="card-content">
    <div class="activity-feed" id="main-activity-feed">
      <div class="activity-item">
  <div class="activity-avatar"><span class="ui-icon" data-icon="robot"></span></div>
        <div class="activity-content">
          <div class="activity-text">Bot started successfully</div>
          <div class="activity-time">Just now</div>
        </div>
        <div class="activity-status success"></div>
      </div>
      <div class="activity-item">
  <div class="activity-avatar"><span class="ui-icon" data-icon="stats"></span></div>
        <div class="activity-content">
          <div class="activity-text">Dashboard accessed by <%= (typeof user !== 'undefined' && user && user.username) ? user.username : 'Admin' %></div>
          <div class="activity-time">1 minute ago</div>
        </div>
        <div class="activity-status info"></div>
      </div>
      <div class="activity-item">
  <div class="activity-avatar"><span class="ui-icon" data-icon="settings"></span></div>
        <div class="activity-content">
          <div class="activity-text">Configuration updated</div>
          <div class="activity-time">5 minutes ago</div>
        </div>
        <div class="activity-status warning"></div>
      </div>
    </div>
  </div>
</div>

<!-- Quick Actions -->
<div class="dashboard-grid">
  <div class="card action-card">
    <div class="card-header">
      <h3 class="card-title">Quick Actions</h3>
  <div class="card-icon"><span class="ui-icon" data-icon="rocket"></span></div>
    </div>
    <div class="card-content">
      <div class="action-buttons">
        <button class="btn btn-primary" onclick="restartBot()">
          <span>Restart Bot</span>
        </button>
        <button class="btn btn-secondary" onclick="clearCache()">
          <span>Clear Cache</span>
        </button>
        <button class="btn btn-secondary" onclick="exportLogs()">
          <span>Export Logs</span>
        </button>
      </div>
    </div>
  </div>

  <div class="card info-card">
    <div class="card-header">
      <h3 class="card-title">System Information</h3>
  <div class="card-icon"><span class="ui-icon" data-icon="system"></span></div>
    </div>
    <div class="card-content">
      <div class="info-row">
        <span class="info-label">Version</span>
        <span class="info-value">v5.0.0</span>
      </div>
      <div class="info-row">
        <span class="info-label">Node.js</span>
        <span class="info-value">v18.17.0</span>
      </div>
      <div class="info-row">
        <span class="info-label">Platform</span>
        <span class="info-value">Windows</span>
      </div>
    </div>
  </div>
</div>

<script>
// Dashboard-specific JavaScript
document.addEventListener('DOMContentLoaded', function() {
  console.log('ðŸš€ Main dashboard initializing...');
  
  // Initialize dashboard if available
  if (window.dashboard) {
    window.dashboard.loadDashboardData();
  }
  
  // Quick action handlers
  window.restartBot = function() {
    if (confirm('Are you sure you want to restart the bot? This will cause a brief downtime.')) {
      fetch('/api/restart', { method: 'POST' })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showNotification('Bot restart initiated', 'info');
          } else {
            showNotification('Failed to restart bot', 'error');
          }
        })
        .catch(err => showNotification('Error: ' + err.message, 'error'));
    }
  };
  
  window.clearCache = function() {
    fetch('/api/cache/clear', { method: 'POST' })
      .then(response => response.json())
      .then(data => {
        showNotification('Cache cleared successfully', 'success');
      })
      .catch(err => showNotification('Error clearing cache', 'error'));
  };
  
  window.exportLogs = function() {
    window.open('/api/logs/export', '_blank');
  };
  
  function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // Add to page
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => notification.classList.add('show'), 100);
    
    // Remove after 3 seconds
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }
  
  // Refresh activity feed
  document.getElementById('refresh-activity')?.addEventListener('click', function() {
    if (window.dashboard) {
      window.dashboard.loadActivityData();
    }
  });
  
  console.log('âœ… Main dashboard initialized');

  // Overview banner sync
  try {
    const guildEl = document.getElementById('guild-count');
    const userEl = document.getElementById('user-count');
    const cmdTodayEl = document.getElementById('total-commands');
    const ovGuild = document.getElementById('ov-guild-count');
    const ovUser = document.getElementById('ov-user-count');
    const ovCmd = document.getElementById('ov-commands-today');
    const mainStatusDot = document.querySelector('.status-card .status-indicator');
    const ovStatusDot = document.getElementById('overview-status-dot');
    const ovStatusText = document.getElementById('overview-status-text');
    function syncBanner(){
      if (guildEl && ovGuild) ovGuild.textContent = guildEl.textContent;
      if (userEl && ovUser) ovUser.textContent = userEl.textContent;
      if (cmdTodayEl && ovCmd) ovCmd.textContent = cmdTodayEl.textContent;
      if (mainStatusDot && ovStatusDot) {
        const offline = mainStatusDot.classList.contains('offline');
        ovStatusDot.classList.toggle('offline', offline);
        ovStatusDot.classList.toggle('online', !offline);
        ovStatusText.textContent = offline ? 'Offline' : 'Online';
      }
    }
    setInterval(syncBanner, 1500);
  } catch(err) { console.warn('Overview banner sync failed', err); }
});
</script>

<style>
/* Main Dashboard Specific Styles */
.welcome-card {
  grid-column: span 2;
}

.welcome-card .card-title {
  font-size: 1.5rem;
  margin-bottom: 0.5rem;
}

.welcome-text {
  color: var(--text-secondary);
  margin-bottom: 1.5rem;
}

.quick-stats {
  display: flex;
  gap: 2rem;
}

.quick-stat {
  text-align: center;
}

.stat-number {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  color: var(--neon-primary);
  font-family: 'JetBrains Mono', monospace;
}

.stat-label {
  font-size: 0.875rem;
  color: var(--text-muted);
}

.status-card .status-indicator {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: var(--success);
  animation: pulse 2s ease-in-out infinite;
}

.status-info {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.status-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.status-label {
  color: var(--text-secondary);
  font-size: 0.875rem;
}

.status-value {
  font-weight: 600;
  font-family: 'JetBrains Mono', monospace;
}

.status-value.online {
  color: var(--success);
}

.metric-row {
  display: flex;
  gap: 2rem;
  margin-bottom: 1rem;
}

.metric-item {
  text-align: center;
}

.metric-value {
  display: block;
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--neon-primary);
  font-family: 'JetBrains Mono', monospace;
}

.metric-label {
  font-size: 0.75rem;
  color: var(--text-muted);
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.metric-trend {
  font-size: 0.875rem;
  padding: 0.5rem 1rem;
  border-radius: 1rem;
  background: var(--glass-light);
  border: 1px solid var(--glass-border);
}

.metric-trend.positive {
  color: var(--success);
}

.performance-chart,
.activity-chart {
  height: 40px;
  margin-top: 1rem;
}

.activity-card {
  grid-column: span 3;
}

.activity-item {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem 0;
  border-bottom: 1px solid var(--glass-border);
}

.activity-item:last-child {
  border-bottom: none;
}

.activity-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: var(--glass-medium);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
}

.activity-content {
  flex: 1;
}

.activity-text {
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.activity-time {
  font-size: 0.875rem;
  color: var(--text-muted);
}

.activity-status {
  width: 8px;
  height: 8px;
  border-radius: 50%;
}

.activity-status.success {
  background: var(--success);
}

.activity-status.info {
  background: var(--neon-primary);
}

.activity-status.warning {
  background: var(--warning);
}

.action-buttons {
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
}

.info-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.5rem 0;
  border-bottom: 1px solid var(--glass-border);
}

.info-row:last-child {
  border-bottom: none;
}

.info-label {
  color: var(--text-secondary);
}

.info-value {
  font-weight: 600;
  font-family: 'JetBrains Mono', monospace;
}

/* Notifications */
.notification {
  position: fixed;
  top: 2rem;
  right: 2rem;
  padding: 1rem 1.5rem;
  border-radius: 0.5rem;
  background: var(--glass-medium);
  border: 1px solid var(--glass-border);
  backdrop-filter: blur(8px);
  font-weight: 500;
  transform: translateX(100%);
  transition: transform 0.3s ease;
  z-index: 1000;
}

.notification.show {
  transform: translateX(0);
}

.notification-success {
  border-left: 4px solid var(--success);
  color: var(--success);
}

.notification-error {
  border-left: 4px solid var(--error);
  color: var(--error);
}

.notification-info {
  border-left: 4px solid var(--neon-primary);
  color: var(--neon-primary);
}

/* Overview Banner */
.overview-banner { position: relative; margin-bottom: 2.25rem; padding: 1.75rem 2rem 2rem; border:1px solid var(--glass-border); border-radius: calc(var(--radius) * 1.5); background: linear-gradient(145deg, hsl(var(--background)) 0%, hsl(var(--background) / 0.4) 60%, hsl(var(--primary) / 0.08) 100%); overflow:hidden; }
.overview-banner:before { content:''; position:absolute; inset:0; backdrop-filter: blur(14px); -webkit-backdrop-filter: blur(14px); mix-blend-mode:overlay; pointer-events:none; }
.overview-inner { position:relative; display:flex; justify-content:space-between; gap:2rem; flex-wrap:wrap; z-index:2; }
.overview-left { display:flex; flex-direction:column; gap:.75rem; min-width:260px; }
.overview-badge { display:inline-flex; align-items:center; gap:.4rem; background:hsl(var(--primary) / 0.12); color:hsl(var(--primary)); font-size:.65rem; padding:.35rem .6rem .3rem; border:1px solid hsl(var(--primary) / 0.35); border-radius: 999px; font-weight:600; letter-spacing:.08em; text-transform:uppercase; backdrop-filter: blur(4px); }
.overview-title { font-size: clamp(1.6rem, 4vw, 2.4rem); line-height:1.05; margin:0; background: linear-gradient(90deg, hsl(var(--foreground)), hsl(var(--primary)) 60%, hsl(var(--neon-accent))); -webkit-background-clip:text; background-clip:text; color: transparent; font-weight:700; }
.overview-subtitle { margin:0; font-size:.9rem; color:hsl(var(--muted-foreground)); max-width:46ch; }
.overview-live { display:flex; align-items:center; gap:.55rem; margin-top:.35rem; font-size:.8rem; font-weight:600; letter-spacing:.05em; text-transform:uppercase; color:hsl(var(--muted-foreground)); }
.overview-live .live-text { color:hsl(var(--foreground)); font-weight:500; letter-spacing:0; text-transform:none; font-size:.8rem; }
.overview-stats { display:grid; grid-template-columns: repeat(auto-fit, minmax(88px,1fr)); gap:1rem; min-width:260px; }
.overview-stat { position:relative; padding: .9rem 1rem .85rem; background: hsl(var(--secondary)); border:1px solid hsl(var(--border)); border-radius: var(--radius); overflow:hidden; }
.overview-stat:before { content:''; position:absolute; inset:0; background: radial-gradient(circle at 30% 20%, hsl(var(--primary) / 0.18), transparent 70%); opacity:.85; mix-blend-mode: plus-lighter; }
.ov-number { display:block; font: 600 1.45rem/1 'JetBrains Mono', monospace; color:hsl(var(--primary)); letter-spacing:-0.5px; }
.ov-label { font-size:.60rem; letter-spacing:.08em; text-transform:uppercase; color:hsl(var(--muted-foreground)); font-weight:600; }
.overview-glow { position:absolute; width:480px; height:480px; top:-240px; right:-140px; background: radial-gradient(circle at center, hsl(var(--primary) / 0.35), transparent 70%); filter: blur(60px); opacity:.55; pointer-events:none; }
.overview-banner .status-dot { width:10px; height:10px; border-radius:50%; background: hsl(var(--success)); box-shadow:0 0 0 0 hsl(var(--success)); position:relative; }
.overview-banner .status-dot.offline { background:hsl(var(--destructive)); }
.overview-banner .status-dot.pulse { animation: overviewPulse 2.2s ease-in-out infinite; }
@keyframes overviewPulse { 0% { box-shadow:0 0 0 0 hsl(var(--success) / .6); } 70% { box-shadow:0 0 0 10px hsl(var(--success) / 0); } 100% { box-shadow:0 0 0 0 hsl(var(--success) / 0); } }

/* Spacing improvements to prevent overlap */
.activity-card { margin-top: 1.25rem; }
.dashboard-grid + .dashboard-grid { margin-top: 2rem; }

@media (max-width: 900px) {
  .overview-inner { flex-direction:column; }
  .overview-right { width:100%; }
  .overview-stats { grid-template-columns: repeat(3, minmax(0,1fr)); }
  .overview-banner { padding:1.4rem 1.25rem 1.6rem; }
}

@media (max-width: 600px) {
  .overview-stats { grid-template-columns: repeat(2, minmax(0,1fr)); }
  .overview-title { font-size: clamp(1.4rem, 7vw, 2rem); }
}

@media (max-width: 768px) {
  .welcome-card {
    grid-column: span 1;
  }
  
  .activity-card {
    grid-column: span 1;
  }
  
  .metric-row {
    gap: 1rem;
  }
  
  .quick-stats {
    gap: 1rem;
  }
  
  .action-buttons {
    flex-direction: column;
  }
}
</style>

<!-- Icon Sprite Script (inline minimal) -->
<script>
// Basic SVG icon registry to replace placeholder spans
const ICONS = {
  'hand-wave': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><path d="M9 3l1 5"/><path d="M15 3l-1 5"/><path d="M5 8l2 4 2 8h6l2-8 2-4"/></svg>',
  'guilds': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><rect x="3" y="5" width="18" height="14" rx="2"/><path d="M7 5v14"/><path d="M17 5v14"/></svg>',
  'performance': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><circle cx="12" cy="12" r="9"/><path d="M12 12 17 7"/><path d="M12 3v3"/><path d="M12 18v3"/><path d="M3 12h3"/><path d="M18 12h3"/></svg>',
  'commands': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><path d="M8 7h8M8 12h8M8 17h5"/><rect x="3" y="4" width="18" height="16" rx="2"/></svg>',
  'robot': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><rect x="5" y="8" width="14" height="10" rx="2"/><path d="M9 8V5h6v3"/><circle cx="9" cy="13" r="1"/><circle cx="15" cy="13" r="1"/><path d="M12 18v3"/></svg>',
  'stats': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><path d="M4 20V8"/><path d="M10 20V4"/><path d="M16 20v-6"/><path d="M22 20v-2"/></svg>',
  'settings': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><circle cx="12" cy="12" r="3"/><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1-2.83 2.83l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-4 0v-.09A1.65 1.65 0 0 0 8 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 1 1-2.83-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82A1.65 1.65 0 0 0 2.09 14H2a2 2 0 0 1 0-4h.09A1.65 1.65 0 0 0 3 8.6a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 1 1 2.83-2.83l.06.06A1.65 1.65 0 0 0 8 3.09V3a2 2 0 0 1 4 0v.09a1.65 1.65 0 0 0 1 .33 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 1 1 2.83 2.83l-.06.06c-.48.48-.61 1.19-.33 1.82.28.63.89 1.04 1.56 1.07H22a2 2 0 0 1 0 4h-.09c-.67.03-1.28.44-1.56 1.07Z"/></svg>',
  'rocket': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><path d="M4 15s1-4 5-8 8-5 8-5 1 4-3 8-10 5-10 5Z"/><path d="M6 18c1.5-1.5 3.5-2 3.5-2s-.5 2-2 3.5S3 22 3 22s1.5-2 3-4Z"/></svg>',
  'system': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><rect x="3" y="4" width="18" height="14" rx="2"/><path d="M8 20h8"/></svg>',
  'palette': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><path d="M12 3a9 9 0 1 0 9 9c0-.6-.4-1-1-1h-3.5a1.5 1.5 0 0 1-1.4-2 1.5 1.5 0 0 0-1.3-2H12Z"/><circle cx="6.5" cy="11.5" r="1"/><circle cx="9.5" cy="7.5" r="1"/><circle cx="14.5" cy="7.5" r="1"/><circle cx="17.5" cy="11.5" r="1"/></svg>',
  'bell': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9"/><path d="M10 21h4"/></svg>',
  'lock': '<svg viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="1.8"><rect x="5" y="11" width="14" height="9" rx="2"/><path d="M8 11V8a4 4 0 0 1 8 0v3"/></svg>'
};
window.addEventListener('DOMContentLoaded',()=>{
  document.querySelectorAll('.ui-icon').forEach(el=>{ const key=el.getAttribute('data-icon'); if(ICONS[key]) el.innerHTML=ICONS[key]; });
});
</script>
