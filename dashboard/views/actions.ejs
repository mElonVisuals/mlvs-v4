<!-- ==== ULTRA-MODERN ACTIONS CONTROL CENTER ==== -->
<section class="panel glass" id="secActions">
  <div class="panel-head">
    <h3>
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: var(--space-3);">
        <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/>
        <circle cx="12" cy="12" r="3"/>
      </svg>
      Action Control Center
    </h3>
    <div class="panel-actions">
      <div class="action-stats">
        <span class="stat-badge">
          <span class="stat-number" id="queuedActions">0</span>
          <span class="stat-label">Queued</span>
        </span>
        <span class="stat-badge">
          <span class="stat-number" id="executedActions">0</span>
          <span class="stat-label">Executed</span>
        </span>
        <span class="stat-badge">
          <span class="stat-number" id="failedActions">0</span>
          <span class="stat-label">Failed</span>
        </span>
      </div>
      <button class="btn small" id="refreshActions" style="display: flex; align-items: center; gap: var(--space-2);">
        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M23 4v6h-6M1 20v-6h6"/>
          <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
        </svg>
        Refresh
      </button>
      <button class="btn small" id="clearQueue" style="display: flex; align-items: center; gap: var(--space-2);">
        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 6h18"/>
          <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>
        </svg>
        Clear Queue
      </button>
    </div>
  </div>
  
  <!-- Action Control Panels -->
  <div class="actions-container" style="padding: var(--space-8);">
    <div class="actions-grid">
      
      <!-- Bot Presence Control -->
      <div class="action-panel">
        <div class="action-header">
          <h4>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
              <circle cx="12" cy="7" r="4"/>
            </svg>
            Bot Presence
          </h4>
          <div class="presence-status" id="currentStatus">
            <div class="status-indicator online"></div>
            <span>Online</span>
          </div>
        </div>
        
        <form id="presenceForm" class="action-form">
          <div class="form-group">
            <label for="presenceStatus">Status</label>
            <select id="presenceStatus" name="status" class="form-control" required>
              <option value="online">🟢 Online</option>
              <option value="idle">🟡 Idle</option>
              <option value="dnd">🔴 Do Not Disturb</option>
              <option value="invisible">⚫ Invisible</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="presenceActivity">Activity</label>
            <input id="presenceActivity" name="activity" class="form-control" placeholder="Playing mlvs.me Dashboard" />
          </div>
          
          <div class="form-group">
            <label for="activityType">Activity Type</label>
            <select id="activityType" name="activityType" class="form-control">
              <option value="0">Playing</option>
              <option value="1">Streaming</option>
              <option value="2">Listening to</option>
              <option value="3">Watching</option>
              <option value="5">Competing in</option>
            </select>
          </div>
          
          <div class="form-help">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"/>
              <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/>
              <line x1="12" y1="17" x2="12.01" y2="17"/>
            </svg>
            Updates the bot's public presence status across all servers
          </div>
          
          <button class="btn primary full-width" type="submit">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9 12l2 2 4-4"/>
              <circle cx="12" cy="12" r="10"/>
            </svg>
            Update Presence
          </button>
        </form>
      </div>
      
      <!-- Global Announcement -->
      <div class="action-panel">
        <div class="action-header">
          <h4>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M3 11l19-9-9 19-2-8-8-2z"/>
            </svg>
            Global Announcement
          </h4>
          <div class="announcement-status">
            <span class="status-badge pending">Ready</span>
          </div>
        </div>
        
        <form id="announceForm" class="action-form">
          <div class="form-group">
            <label for="announceGuild">Server ID</label>
            <input id="announceGuild" name="guildId" class="form-control" placeholder="123456789012345678" required />
            <div class="form-hint">Enter the Discord server ID where you want to send the announcement</div>
          </div>
          
          <div class="form-group">
            <label for="announceChannel">Channel ID</label>
            <input id="announceChannel" name="channelId" class="form-control" placeholder="987654321098765432" required />
            <div class="form-hint">Enter the specific channel ID for the announcement</div>
          </div>
          
          <div class="form-group">
            <label for="announceMessage">Message Content</label>
            <textarea id="announceMessage" name="message" class="form-control" rows="4" required placeholder="🎉 Important announcement from mlvs.me!

This is an example announcement message that will be sent to the specified channel.

You can include emojis, mentions, and formatting."></textarea>
            <div class="message-counter">
              <span id="charCount">0</span> / 2000 characters
            </div>
          </div>
          
          <div class="form-group">
            <div class="checkbox-group">
              <label class="checkbox-label">
                <input type="checkbox" id="embedAnnouncement" />
                <span class="checkbox-mark"></span>
                Send as Rich Embed
              </label>
              <label class="checkbox-label">
                <input type="checkbox" id="pingEveryone" />
                <span class="checkbox-mark"></span>
                Ping @everyone
              </label>
            </div>
          </div>
          
          <div class="form-help">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"/>
              <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/>
              <line x1="12" y1="17" x2="12.01" y2="17"/>
            </svg>
            Queues an announcement to be sent by the bot. Message will be processed in order.
          </div>
          
          <button class="btn primary full-width" type="submit">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M3 11l19-9-9 19-2-8-8-2z"/>
            </svg>
            Queue Announcement
          </button>
        </form>
      </div>
      
      <!-- Server Management -->
      <div class="action-panel">
        <div class="action-header">
          <h4>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
              <line x1="8" y1="21" x2="16" y2="21"/>
              <line x1="12" y1="17" x2="12" y2="21"/>
            </svg>
            Server Actions
          </h4>
        </div>
        
        <form id="serverForm" class="action-form">
          <div class="form-group">
            <label for="serverAction">Action Type</label>
            <select id="serverAction" name="action" class="form-control" required>
              <option value="">Select Action...</option>
              <option value="leave">Leave Server</option>
              <option value="sync">Sync Commands</option>
              <option value="backup">Create Backup</option>
              <option value="maintenance">Maintenance Mode</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="targetServer">Target Server ID</label>
            <input id="targetServer" name="serverId" class="form-control" placeholder="Server ID (optional for global actions)" />
          </div>
          
          <div class="form-group" id="confirmationGroup" style="display: none;">
            <label class="checkbox-label">
              <input type="checkbox" id="confirmAction" required />
              <span class="checkbox-mark"></span>
              I understand this action cannot be undone
            </label>
          </div>
          
          <button class="btn warning full-width" type="submit">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
              <line x1="12" y1="9" x2="12" y2="13"/>
              <line x1="12" y1="17" x2="12.01" y2="17"/>
            </svg>
            Execute Server Action
          </button>
        </form>
      </div>
      
      <!-- Emergency Controls -->
      <div class="action-panel emergency">
        <div class="action-header">
          <h4>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"/>
              <line x1="12" y1="8" x2="12" y2="12"/>
              <line x1="12" y1="16" x2="12.01" y2="16"/>
            </svg>
            Emergency Controls
          </h4>
          <div class="emergency-indicator">
            <div class="status-indicator warning pulse"></div>
            <span>Standby</span>
          </div>
        </div>
        
        <div class="emergency-controls">
          <button class="btn danger full-width" id="emergencyShutdown">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"/>
              <line x1="15" y1="9" x2="9" y2="15"/>
              <line x1="9" y1="9" x2="15" y2="15"/>
            </svg>
            Emergency Shutdown
          </button>
          
          <button class="btn warning full-width" id="forceReconnect">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M23 4v6h-6M1 20v-6h6"/>
              <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
            </svg>
            Force Reconnect
          </button>
          
          <button class="btn secondary full-width" id="clearCache">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M3 6h18"/>
              <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>
              <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>
            </svg>
            Clear Cache
          </button>
        </div>
        
        <div class="emergency-warning">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
            <line x1="12" y1="9" x2="12" y2="13"/>
            <line x1="12" y1="17" x2="12.01" y2="17"/>
          </svg>
          Use emergency controls only when necessary. These actions may disrupt service.
        </div>
      </div>
      
    </div>
  </div>
  
  <!-- Action Queue Management -->
  <section class="panel glass queue-panel" style="margin-top: var(--space-8);">
    <div class="panel-head">
      <h3>
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: var(--space-3);">
          <path d="M9 12l2 2 4-4"/>
          <path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"/>
          <path d="M21 5c0 1.66-4 3-9 3S3 6.66 3 5"/>
          <path d="M21 12v7c0 1.66-4 3-9 3s-9-1.34-9-3v-7"/>
          <path d="M21 5v7c0 1.66-4 3-9 3s-9-1.34-9-3V5"/>
        </svg>
        Action Queue
      </h3>
      <div class="queue-controls">
        <button class="btn small" id="pauseQueue">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="6" y="4" width="4" height="16"/>
            <rect x="14" y="4" width="4" height="16"/>
          </svg>
          Pause
        </button>
        <button class="btn small" id="resumeQueue">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polygon points="5,3 19,12 5,21"/>
          </svg>
          Resume
        </button>
      </div>
    </div>
    
    <div class="queue-container" style="padding: var(--space-6) var(--space-8);">
      <div class="queue-stats">
        <div class="queue-stat">
          <span class="stat-value" id="queueLength">0</span>
          <span class="stat-label">Items in Queue</span>
        </div>
        <div class="queue-stat">
          <span class="stat-value" id="processingRate">0/min</span>
          <span class="stat-label">Processing Rate</span>
        </div>
        <div class="queue-stat">
          <span class="stat-value" id="avgProcessTime">0ms</span>
          <span class="stat-label">Avg Process Time</span>
        </div>
        <div class="queue-stat">
          <span class="stat-value" id="successRate">0%</span>
          <span class="stat-label">Success Rate</span>
        </div>
      </div>
      
      <div class="queue-list-container">
        <ul id="actionQueue" class="action-queue-list" aria-live="polite">
          <!-- Queue items will be populated here -->
        </ul>
        
        <!-- Empty Queue State -->
        <div class="queue-empty" id="queueEmpty">
          <div class="empty-icon">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <path d="M9 12l2 2 4-4"/>
              <circle cx="12" cy="12" r="10"/>
            </svg>
          </div>
          <h3>No Actions Queued</h3>
          <p>All actions have been processed successfully. Queue new actions using the control panels above.</p>
        </div>
      </div>
    </div>
  </section>
</section>

<style>
  /* ==== ACTION CONTROL CENTER SPECIFIC STYLES ==== */
  .action-stats {
    display: flex;
    gap: var(--space-4);
    align-items: center;
  }
  
  .actions-container {
    min-height: 400px;
  }
  
  .actions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
    gap: var(--space-8);
  }
  
  .action-panel {
    background: var(--glass-light);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-3xl);
    padding: var(--space-6);
    transition: all var(--duration-300) var(--ease-out);
    animation: slideInUp 0.3s var(--ease-spring);
  }
  
  .action-panel:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
    background: var(--glass-medium);
  }
  
  .action-panel.emergency {
    border-color: var(--red-500/30);
    background: linear-gradient(135deg, var(--glass-light), rgba(239, 68, 68, 0.05));
  }
  
  .action-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--space-6);
    padding-bottom: var(--space-4);
    border-bottom: 1px solid var(--glass-border-light);
  }
  
  .action-header h4 {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    font-size: var(--text-lg);
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }
  
  .presence-status,
  .announcement-status,
  .emergency-indicator {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    font-size: var(--text-sm);
    color: var(--text-muted);
  }
  
  .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
  }
  
  .status-indicator.online {
    background: var(--emerald-500);
    box-shadow: 0 0 8px var(--emerald-500/50);
  }
  
  .status-indicator.idle {
    background: var(--amber-500);
    box-shadow: 0 0 8px var(--amber-500/50);
  }
  
  .status-indicator.dnd {
    background: var(--red-500);
    box-shadow: 0 0 8px var(--red-500/50);
  }
  
  .status-indicator.warning {
    background: var(--orange-500);
    box-shadow: 0 0 8px var(--orange-500/50);
  }
  
  .status-indicator.pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  .action-form {
    display: flex;
    flex-direction: column;
    gap: var(--space-4);
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
  }
  
  .form-group label {
    font-size: var(--text-sm);
    font-weight: 500;
    color: var(--text-primary);
  }
  
  .form-control {
    background: var(--glass-medium);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border);
    border-radius: var(--radius-lg);
    padding: var(--space-3);
    color: var(--text-primary);
    font-size: var(--text-sm);
    transition: all var(--duration-200) var(--ease-out);
    resize: vertical;
  }
  
  .form-control:focus {
    outline: none;
    border-color: var(--primary-500);
    box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
  }
  
  .form-control::placeholder {
    color: var(--text-muted);
  }
  
  .form-hint {
    font-size: var(--text-xs);
    color: var(--text-muted);
    font-style: italic;
  }
  
  .form-help {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    padding: var(--space-3);
    background: var(--glass-medium);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-lg);
    font-size: var(--text-xs);
    color: var(--text-muted);
  }
  
  .message-counter {
    display: flex;
    justify-content: flex-end;
    font-size: var(--text-xs);
    color: var(--text-muted);
    font-family: 'JetBrains Mono', monospace;
  }
  
  .checkbox-group {
    display: flex;
    gap: var(--space-4);
    flex-wrap: wrap;
  }
  
  .checkbox-label {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    font-size: var(--text-sm);
    color: var(--text-primary);
    cursor: pointer;
  }
  
  .checkbox-label input[type="checkbox"] {
    display: none;
  }
  
  .checkbox-mark {
    width: 18px;
    height: 18px;
    background: var(--glass-medium);
    border: 1px solid var(--glass-border);
    border-radius: var(--radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--duration-200) var(--ease-out);
  }
  
  .checkbox-mark::after {
    content: '✓';
    color: white;
    font-size: var(--text-xs);
    opacity: 0;
    transition: opacity var(--duration-200) var(--ease-out);
  }
  
  .checkbox-label input[type="checkbox"]:checked + .checkbox-mark {
    background: var(--primary-500);
    border-color: var(--primary-500);
  }
  
  .checkbox-label input[type="checkbox"]:checked + .checkbox-mark::after {
    opacity: 1;
  }
  
  .full-width {
    width: 100%;
  }
  
  .emergency-controls {
    display: flex;
    flex-direction: column;
    gap: var(--space-3);
  }
  
  .emergency-warning {
    display: flex;
    align-items: flex-start;
    gap: var(--space-2);
    padding: var(--space-3);
    background: var(--red-500/10);
    border: 1px solid var(--red-500/20);
    border-radius: var(--radius-lg);
    font-size: var(--text-xs);
    color: var(--red-400);
    margin-top: var(--space-4);
  }
  
  .queue-panel {
    border: 1px solid var(--glass-border-light);
  }
  
  .queue-controls {
    display: flex;
    gap: var(--space-2);
  }
  
  .queue-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: var(--space-4);
    margin-bottom: var(--space-6);
  }
  
  .queue-stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: var(--space-4);
    background: var(--glass-light);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-2xl);
    text-align: center;
  }
  
  .queue-stat .stat-value {
    font-family: 'JetBrains Mono', monospace;
    font-size: var(--text-xl);
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: var(--space-1);
  }
  
  .queue-stat .stat-label {
    font-size: var(--text-xs);
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .queue-list-container {
    min-height: 300px;
    position: relative;
  }
  
  .action-queue-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: var(--space-3);
  }
  
  .queue-item {
    display: flex;
    align-items: center;
    gap: var(--space-4);
    padding: var(--space-4);
    background: var(--glass-light);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-2xl);
    transition: all var(--duration-200) var(--ease-out);
    animation: slideInQueue 0.3s var(--ease-spring);
  }
  
  .queue-item:hover {
    background: var(--glass-medium);
    transform: translateX(4px);
  }
  
  .queue-item-icon {
    width: 40px;
    height: 40px;
    background: var(--primary-500/20);
    color: var(--primary-400);
    border-radius: var(--radius-2xl);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }
  
  .queue-item-content {
    flex: 1;
    min-width: 0;
  }
  
  .queue-item-title {
    font-weight: 600;
    color: var(--text-primary);
    font-size: var(--text-sm);
    margin-bottom: var(--space-1);
  }
  
  .queue-item-details {
    font-size: var(--text-xs);
    color: var(--text-muted);
  }
  
  .queue-item-status {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    font-size: var(--text-xs);
  }
  
  .queue-item-actions {
    display: flex;
    gap: var(--space-2);
  }
  
  .queue-item-btn {
    padding: var(--space-1) var(--space-2);
    background: var(--glass-medium);
    border: 1px solid var(--glass-border);
    border-radius: var(--radius-md);
    color: var(--text-muted);
    font-size: var(--text-xs);
    cursor: pointer;
    transition: all var(--duration-200) var(--ease-out);
  }
  
  .queue-item-btn:hover {
    color: var(--text-primary);
    background: var(--glass-heavy);
  }
  
  .queue-item-btn.danger:hover {
    color: var(--red-400);
    background: var(--red-500/10);
  }
  
  .queue-empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: var(--space-20) var(--space-8);
    text-align: center;
  }
  
  .empty-icon {
    margin-bottom: var(--space-6);
    color: var(--text-muted);
    opacity: 0.5;
  }
  
  .queue-empty h3 {
    font-size: var(--text-xl);
    color: var(--text-primary);
    margin-bottom: var(--space-3);
  }
  
  .queue-empty p {
    color: var(--text-tertiary);
    margin-bottom: var(--space-6);
    max-width: 400px;
  }
  
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes slideInQueue {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
  
  @media (max-width: 768px) {
    .actions-grid {
      grid-template-columns: 1fr;
    }
    
    .action-stats {
      flex-direction: column;
      gap: var(--space-2);
    }
    
    .queue-stats {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .queue-controls {
      flex-direction: column;
      gap: var(--space-2);
    }
    
    .checkbox-group {
      flex-direction: column;
      gap: var(--space-2);
    }
    
    .emergency-controls {
      gap: var(--space-2);
    }
  }
</style>

<script>
  // Enhanced action control center with real-time queue management
  document.addEventListener('DOMContentLoaded', function() {
    let actionQueue = [];
    let queuePaused = false;
    let processingStats = {
      executed: 0,
      failed: 0,
      totalProcessTime: 0
    };
    
    const queuedActionsCount = document.getElementById('queuedActions');
    const executedActionsCount = document.getElementById('executedActions');
    const failedActionsCount = document.getElementById('failedActions');
    const queueLength = document.getElementById('queueLength');
    const processingRate = document.getElementById('processingRate');
    const avgProcessTime = document.getElementById('avgProcessTime');
    const successRate = document.getElementById('successRate');
    const actionQueueList = document.getElementById('actionQueue');
    const queueEmpty = document.getElementById('queueEmpty');
    const currentStatus = document.getElementById('currentStatus');
    
    // Action type configurations
    const actionTypes = {
      presence: { icon: '👤', name: 'Presence Update', color: 'blue' },
      announcement: { icon: '📢', name: 'Global Announcement', color: 'purple' },
      server: { icon: '🖥️', name: 'Server Action', color: 'orange' },
      emergency: { icon: '🚨', name: 'Emergency Action', color: 'red' }
    };
    
    // Add action to queue
    function addToQueue(type, data, priority = 'normal') {
      const action = {
        id: Date.now() + Math.random(),
        type: type,
        data: data,
        priority: priority,
        status: 'queued',
        timestamp: new Date(),
        retries: 0
      };
      
      actionQueue.unshift(action);
      updateQueueDisplay();
      updateStats();
      
      // Auto-process if not paused
      if (!queuePaused) {
        setTimeout(() => processQueue(), 1000);
      }
      
      return action.id;
    }
    
    // Process queue items
    function processQueue() {
      if (queuePaused || actionQueue.length === 0) return;
      
      const action = actionQueue.find(a => a.status === 'queued');
      if (!action) return;
      
      action.status = 'processing';
      updateQueueDisplay();
      
      // Simulate processing time
      const processingTime = Math.random() * 3000 + 500;
      setTimeout(() => {
        const success = Math.random() > 0.1; // 90% success rate
        
        if (success) {
          action.status = 'completed';
          processingStats.executed++;
        } else {
          action.status = 'failed';
          processingStats.failed++;
        }
        
        processingStats.totalProcessTime += processingTime;
        
        // Remove completed/failed actions after delay
        setTimeout(() => {
          const index = actionQueue.findIndex(a => a.id === action.id);
          if (index !== -1) {
            actionQueue.splice(index, 1);
            updateQueueDisplay();
          }
        }, 3000);
        
        updateQueueDisplay();
        updateStats();
        
        // Process next item
        setTimeout(() => processQueue(), 500);
      }, processingTime);
    }
    
    // Update queue display
    function updateQueueDisplay() {
      if (actionQueue.length === 0) {
        actionQueueList.style.display = 'none';
        queueEmpty.style.display = 'flex';
      } else {
        queueEmpty.style.display = 'none';
        actionQueueList.style.display = 'flex';
        
        actionQueueList.innerHTML = '';
        actionQueue.forEach(action => {
          const item = createQueueItem(action);
          actionQueueList.appendChild(item);
        });
      }
    }
    
    // Create queue item element
    function createQueueItem(action) {
      const li = document.createElement('li');
      li.className = 'queue-item';
      li.dataset.id = action.id;
      
      const config = actionTypes[action.type];
      const statusClass = action.status;
      const statusText = action.status.charAt(0).toUpperCase() + action.status.slice(1);
      
      li.innerHTML = `
        <div class="queue-item-icon">
          ${config.icon}
        </div>
        <div class="queue-item-content">
          <div class="queue-item-title">${config.name}</div>
          <div class="queue-item-details">${formatActionDetails(action)}</div>
        </div>
        <div class="queue-item-status">
          <div class="status-indicator ${statusClass}"></div>
          <span>${statusText}</span>
        </div>
        <div class="queue-item-actions">
          ${action.status === 'queued' ? `
            <button class="queue-item-btn" onclick="prioritizeAction('${action.id}')">Priority</button>
            <button class="queue-item-btn danger" onclick="removeAction('${action.id}')">Remove</button>
          ` : ''}
        </div>
      `;
      
      return li;
    }
    
    // Format action details
    function formatActionDetails(action) {
      switch (action.type) {
        case 'presence':
          return `Status: ${action.data.status} | Activity: ${action.data.activity || 'None'}`;
        case 'announcement':
          return `Server: ${action.data.guildId} | Channel: ${action.data.channelId}`;
        case 'server':
          return `Action: ${action.data.action} | Target: ${action.data.serverId || 'Global'}`;
        case 'emergency':
          return `Emergency: ${action.data.type}`;
        default:
          return 'Processing...';
      }
    }
    
    // Update statistics
    function updateStats() {
      const queued = actionQueue.filter(a => a.status === 'queued').length;
      queuedActionsCount.textContent = queued;
      queueLength.textContent = actionQueue.length;
      
      executedActionsCount.textContent = processingStats.executed;
      failedActionsCount.textContent = processingStats.failed;
      
      const totalActions = processingStats.executed + processingStats.failed;
      if (totalActions > 0) {
        const avgTime = Math.round(processingStats.totalProcessTime / totalActions);
        avgProcessTime.textContent = avgTime + 'ms';
        
        const success = Math.round((processingStats.executed / totalActions) * 100);
        successRate.textContent = success + '%';
        
        processingRate.textContent = Math.round(totalActions / 10) + '/min';
      }
    }
    
    // Form handlers
    document.getElementById('presenceForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const data = {
        status: formData.get('status'),
        activity: formData.get('activity'),
        activityType: formData.get('activityType')
      };
      
      addToQueue('presence', data);
      
      // Update current status display
      updatePresenceStatus(data.status);
      
      // Show success message
      showNotification('Presence update queued successfully!', 'success');
      
      e.target.reset();
    });
    
    document.getElementById('announceForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const data = {
        guildId: formData.get('guildId'),
        channelId: formData.get('channelId'),
        message: formData.get('message'),
        embed: document.getElementById('embedAnnouncement').checked,
        pingEveryone: document.getElementById('pingEveryone').checked
      };
      
      addToQueue('announcement', data, 'high');
      
      showNotification('Announcement queued successfully!', 'success');
      
      e.target.reset();
      document.getElementById('charCount').textContent = '0';
    });
    
    document.getElementById('serverForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const data = {
        action: formData.get('action'),
        serverId: formData.get('serverId')
      };
      
      addToQueue('server', data, 'high');
      
      showNotification('Server action queued successfully!', 'warning');
      
      e.target.reset();
      document.getElementById('confirmationGroup').style.display = 'none';
    });
    
    // Character counter for announcement
    document.getElementById('announceMessage').addEventListener('input', function(e) {
      const count = e.target.value.length;
      document.getElementById('charCount').textContent = count;
      
      if (count > 2000) {
        e.target.style.borderColor = 'var(--red-500)';
      } else {
        e.target.style.borderColor = '';
      }
    });
    
    // Server action confirmation
    document.getElementById('serverAction').addEventListener('change', function(e) {
      const confirmationGroup = document.getElementById('confirmationGroup');
      const dangerousActions = ['leave', 'maintenance'];
      
      if (dangerousActions.includes(e.target.value)) {
        confirmationGroup.style.display = 'block';
      } else {
        confirmationGroup.style.display = 'none';
      }
    });
    
    // Emergency controls
    document.getElementById('emergencyShutdown').addEventListener('click', function() {
      if (confirm('Are you sure you want to perform an emergency shutdown? This will disconnect the bot immediately.')) {
        addToQueue('emergency', { type: 'shutdown' }, 'critical');
        showNotification('Emergency shutdown initiated!', 'danger');
      }
    });
    
    document.getElementById('forceReconnect').addEventListener('click', function() {
      addToQueue('emergency', { type: 'reconnect' }, 'high');
      showNotification('Force reconnect queued!', 'warning');
    });
    
    document.getElementById('clearCache').addEventListener('click', function() {
      addToQueue('emergency', { type: 'clear-cache' }, 'normal');
      showNotification('Cache clear queued!', 'info');
    });
    
    // Queue controls
    document.getElementById('pauseQueue').addEventListener('click', function() {
      queuePaused = true;
      this.style.display = 'none';
      document.getElementById('resumeQueue').style.display = 'flex';
      showNotification('Queue paused', 'info');
    });
    
    document.getElementById('resumeQueue').addEventListener('click', function() {
      queuePaused = false;
      this.style.display = 'none';
      document.getElementById('pauseQueue').style.display = 'flex';
      processQueue();
      showNotification('Queue resumed', 'success');
    });
    
    document.getElementById('clearQueue').addEventListener('click', function() {
      if (confirm('Are you sure you want to clear all queued actions?')) {
        actionQueue = actionQueue.filter(a => a.status === 'processing');
        updateQueueDisplay();
        updateStats();
        showNotification('Queue cleared!', 'info');
      }
    });
    
    document.getElementById('refreshActions').addEventListener('click', function() {
      updateStats();
      updateQueueDisplay();
      showNotification('Actions refreshed!', 'success');
    });
    
    // Utility functions
    function updatePresenceStatus(status) {
      const indicator = currentStatus.querySelector('.status-indicator');
      const text = currentStatus.querySelector('span');
      
      indicator.className = `status-indicator ${status}`;
      text.textContent = status.charAt(0).toUpperCase() + status.slice(1);
    }
    
    function showNotification(message, type = 'info') {
      // Create temporary notification
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      notification.style.cssText = `
        position: fixed;
        top: var(--space-4);
        right: var(--space-4);
        background: var(--glass-heavy);
        backdrop-filter: blur(12px);
        border: 1px solid var(--glass-border);
        border-radius: var(--radius-lg);
        padding: var(--space-3) var(--space-4);
        color: var(--text-primary);
        font-size: var(--text-sm);
        z-index: 1000;
        animation: slideInRight 0.3s var(--ease-spring);
      `;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
    
    // Global functions for queue management
    window.prioritizeAction = function(actionId) {
      const action = actionQueue.find(a => a.id === actionId);
      if (action && action.status === 'queued') {
        action.priority = 'high';
        // Move to front of queue
        const index = actionQueue.indexOf(action);
        actionQueue.splice(index, 1);
        actionQueue.unshift(action);
        updateQueueDisplay();
        showNotification('Action prioritized!', 'info');
      }
    };
    
    window.removeAction = function(actionId) {
      const index = actionQueue.findIndex(a => a.id === actionId);
      if (index !== -1 && actionQueue[index].status === 'queued') {
        actionQueue.splice(index, 1);
        updateQueueDisplay();
        updateStats();
        showNotification('Action removed from queue', 'info');
      }
    };
    
    // Initialize with some mock queue items for demonstration
    setTimeout(() => {
  addToQueue('presence', { status: 'online', activity: 'mlvs.me Dashboard' });
    }, 1000);
    
    // Start queue processing
    processQueue();
    
    console.log('✅ Action control center initialized');
  });
</script>
