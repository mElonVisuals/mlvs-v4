<!-- Dashboard Health Monitoring -->
<div class="metric-row">
  <div class="metric-card">
    <div class="metric-header">
      <span class="metric-label">Network Latency</span>
      <span class="metric-icon">‚ö°</span>
    </div>
    <div class="metric-value" id="mLatency">45ms</div>
    <div class="metric-change positive">+2ms from avg</div>
    <svg id="spLatency" viewBox="0 0 160 44" style="width: 100%; height: 44px; margin-top: var(--space-3); opacity: 0.6;"></svg>
  </div>
  
  <div class="metric-card">
    <div class="metric-header">
      <span class="metric-label">Memory Usage</span>
      <span class="metric-icon">üíæ</span>
    </div>
    <div class="metric-value" id="mMemory">124MB</div>
    <div class="metric-change negative">-8MB from avg</div>
    <svg id="spMemory" viewBox="0 0 160 44" style="width: 100%; height: 44px; margin-top: var(--space-3); opacity: 0.6;"></svg>
  </div>
  
  <div class="metric-card">
    <div class="metric-header">
      <span class="metric-label">CPU Usage</span>
      <span class="metric-icon">üñ•Ô∏è</span>
    </div>
    <div class="metric-value" id="mCpu">15%</div>
    <div class="metric-change positive">+3% from avg</div>
    <svg id="spCpu" viewBox="0 0 160 44" style="width: 100%; height: 44px; margin-top: var(--space-3); opacity: 0.6;"></svg>
  </div>
  
  <div class="metric-card">
    <div class="metric-header">
      <span class="metric-label">Bot Status</span>
      <span class="metric-icon">ü§ñ</span>
    </div>
    <div class="metric-value" id="d2Status">Online</div>
    <div class="metric-change positive">99.9% availability</div>
  </div>
</div>

<!-- Additional Status Information for JavaScript -->
<div class="metric-row">
  <div class="metric-card">
    <div class="metric-header">
      <span class="metric-label">Active Guilds</span>
      <span class="metric-icon">üèòÔ∏è</span>
    </div>
    <div class="metric-value" id="d2Guilds">0</div>
    <div class="metric-change neutral">Connected servers</div>
  </div>
  
  <div class="metric-card">
    <div class="metric-header">
      <span class="metric-label">Total Users</span>
      <span class="metric-icon">üë•</span>
    </div>
    <div class="metric-value" id="d2Users">0</div>
    <div class="metric-change neutral">Across all guilds</div>
  </div>
  
  <div class="metric-card">
    <div class="metric-header">
      <span class="metric-label">Bot Identity</span>
      <span class="metric-icon">ü§ñ</span>
    </div>
    <div class="metric-value" id="d2Bot" style="font-size: var(--text-lg);">Loading...</div>
    <div class="metric-change neutral">Bot tag</div>
  </div>
  
  <div class="metric-card">
    <div class="metric-header">
      <span class="metric-label">Last Updated</span>
      <span class="metric-icon">üïí</span>
    </div>
    <div class="metric-value" id="d2Updated" style="font-size: var(--text-lg);">‚Äî</div>
    <div class="metric-change neutral">Data refresh time</div>
  </div>
</div>

<div class="panel">
  <div class="panel-head">
    <div>
      <h2 class="panel-title">System Health Monitor</h2>
      <p class="panel-subtitle">Real-time monitoring of bot performance and resources</p>
    </div>
    <div style="display: flex; align-items: center; gap: var(--space-3);">
      <span class="status-dot online"></span>
      <span style="font-size: var(--text-sm); color: var(--text-secondary);">All Systems Operational</span>
      <button class="btn btn-secondary" onclick="refreshStatus(); refreshMetrics();">
        <span>Refresh</span>
      </button>
    </div>
  </div>
  
  <div style="display: grid; grid-template-columns: 1fr 1fr; gap: var(--space-8); margin-top: var(--space-6);">
    <div>
      <h3 style="font-size: var(--text-lg); font-weight: 600; color: var(--text-primary); margin-bottom: var(--space-4);">Performance Metrics</h3>
      <div style="display: flex; flex-direction: column; gap: var(--space-4);">
        <div style="display: flex; justify-content: space-between; align-items: center; padding: var(--space-3) 0; border-bottom: 1px solid var(--glass-border);">
          <span style="color: var(--text-secondary);">Response Time</span>
          <span style="color: var(--text-neon-cyan); font-weight: 600;">45ms</span>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center; padding: var(--space-3) 0; border-bottom: 1px solid var(--glass-border);">
          <span style="color: var(--text-secondary);">Memory Usage</span>
          <span style="color: var(--status-success); font-weight: 600;">124MB</span>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center; padding: var(--space-3) 0; border-bottom: 1px solid var(--glass-border);">
          <span style="color: var(--text-secondary);">CPU Load</span>
          <span style="color: var(--status-warning); font-weight: 600;">15%</span>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center; padding: var(--space-3) 0; border-bottom: 1px solid var(--glass-border);">
          <span style="color: var(--text-secondary);">Active Connections</span>
          <span style="color: var(--text-neon-purple); font-weight: 600;">1,247</span>
        </div>
      </div>
    </div>
    
    <div>
      <h3 style="font-size: var(--text-lg); font-weight: 600; color: var(--text-primary); margin-bottom: var(--space-4);">System Status</h3>
      <div style="display: flex; flex-direction: column; gap: var(--space-4);">
        <div style="display: flex; justify-content: space-between; align-items: center; padding: var(--space-3) 0; border-bottom: 1px solid var(--glass-border);">
          <span style="color: var(--text-secondary);">Database</span>
          <div style="display: flex; align-items: center; gap: var(--space-2);">
            <span class="status-dot online"></span>
            <span style="color: var(--status-success); font-weight: 600;">Connected</span>
          </div>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center; padding: var(--space-3) 0; border-bottom: 1px solid var(--glass-border);">
          <span style="color: var(--text-secondary);">Discord API</span>
          <div style="display: flex; align-items: center; gap: var(--space-2);">
            <span class="status-dot online"></span>
            <span style="color: var(--status-success); font-weight: 600;">Online</span>
          </div>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center; padding: var(--space-3) 0; border-bottom: 1px solid var(--glass-border);">
          <span style="color: var(--text-secondary);">Cache System</span>
          <div style="display: flex; align-items: center; gap: var(--space-2);">
            <span class="status-dot warning"></span>
            <span style="color: var(--status-warning); font-weight: 600;">Degraded</span>
          </div>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center; padding: var(--space-3) 0; border-bottom: 1px solid var(--glass-border);">
          <span style="color: var(--text-secondary);">Background Tasks</span>
          <div style="display: flex; align-items: center; gap: var(--space-2);">
            <span class="status-dot online"></span>
            <span style="color: var(--status-success); font-weight: 600;">Running</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
    </div>
    
    <div class="metric-card glass-lite" id="memoryCard">
      <div class="metric-header">
        <div class="metric-label">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: var(--space-2);">
            <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
            <line x1="8" y1="21" x2="16" y2="21"/>
            <line x1="12" y1="17" x2="12" y2="21"/>
          </svg>
          Memory Usage
        </div>
        <div class="metric-status" id="memoryStatus">
          <div class="status-indicator status-warning"></div>
        </div>
      </div>
      <div class="metric-value" id="mMemory">‚Äî MB</div>
      <div class="metric-trend" id="memoryTrend">‚Üë +15MB from avg</div>
      <div class="metric-chart">
        <svg id="spMemory" viewBox="0 0 160 44" style="width: 100%; height: 44px;">
          <defs>
            <linearGradient id="memoryGradient" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" style="stop-color:var(--orange-400);stop-opacity:0.8"/>
              <stop offset="100%" style="stop-color:var(--orange-600);stop-opacity:0.1"/>
            </linearGradient>
          </defs>
        </svg>
      </div>
    </div>
    
    <div class="metric-card glass-lite" id="cpuCard">
      <div class="metric-header">
        <div class="metric-label">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: var(--space-2);">
            <rect x="4" y="4" width="16" height="16" rx="2"/>
            <rect x="9" y="9" width="6" height="6"/>
            <line x1="9" y1="1" x2="10" y2="4"/>
            <line x1="14" y1="1" x2="15" y2="4"/>
            <line x1="9" y1="20" x2="10" y2="23"/>
            <line x1="14" y1="20" x2="15" y2="23"/>
            <line x1="20" y1="9" x2="23" y2="10"/>
            <line x1="20" y1="14" x2="23" y2="15"/>
            <line x1="1" y1="9" x2="4" y2="10"/>
            <line x1="1" y1="14" x2="4" y2="15"/>
          </svg>
          CPU Usage
        </div>
        <div class="metric-status" id="cpuStatus">
          <div class="status-indicator status-good"></div>
        </div>
      </div>
      <div class="metric-value" id="mCpu">‚Äî %</div>
      <div class="metric-trend" id="cpuTrend">‚Üì -5% from avg</div>
      <div class="metric-chart">
        <svg id="spCpu" viewBox="0 0 160 44" style="width: 100%; height: 44px;">
          <defs>
            <linearGradient id="cpuGradient" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" style="stop-color:var(--emerald-400);stop-opacity:0.8"/>
              <stop offset="100%" style="stop-color:var(--emerald-600);stop-opacity:0.1"/>
            </linearGradient>
          </defs>
        </svg>
      </div>
    </div>
    
    <div class="metric-card glass-lite" id="uptimeCard">
      <div class="metric-header">
        <div class="metric-label">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: var(--space-2);">
            <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"/>
          </svg>
          System Uptime
        </div>
        <div class="metric-status" id="uptimeStatus">
          <div class="status-indicator status-excellent"></div>
        </div>
      </div>
      <div class="metric-value" id="mUptime">99.9%</div>
      <div class="metric-trend" id="uptimeTrend">üéØ Perfect stability</div>
      <div class="metric-progress">
        <div class="progress-bar">
          <div class="progress-fill" style="width: 99.9%; background: linear-gradient(90deg, var(--emerald-500), var(--emerald-400));"></div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Enhanced Statistics Grid -->
  <div class="dash2-row stats" style="margin-top: var(--space-8);">
    <div class="stat glass-lite" id="guildsCard">
      <div class="stat-icon">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"/>
          <circle cx="9" cy="7" r="4"/>
          <path d="M23 21v-2a4 4 0 0 0-3-3.87"/>
          <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
        </svg>
      </div>
      <div class="stat-label">Active Servers</div>
      <div class="stat-value" id="d2Guilds"><%= guilds %></div>
      <div class="stat-change positive">+12 this week</div>
    </div>
    
    <div class="stat glass-lite" id="usersCard">
      <div class="stat-icon">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/>
          <circle cx="9" cy="7" r="4"/>
          <path d="M22 21v-2a4 4 0 0 0-3-3.87"/>
          <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
        </svg>
      </div>
      <div class="stat-label">Total Users</div>
      <div class="stat-value" id="d2Users"><%= users %></div>
      <div class="stat-change positive">+1.2k this week</div>
    </div>
    
    <div class="stat glass-lite" id="commandsCard">
      <div class="stat-icon">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M9 12l2 2 4-4"/>
          <path d="M21 12c-1 0-3-1-3-3s2-3 3-3 3 1 3 3-2 3-3 3"/>
          <path d="M3 12c1 0 3-1 3-3s-2-3-3-3-3 1-3 3 2 3 3 3"/>
          <path d="M13 12h1"/>
          <path d="M11 12h1"/>
        </svg>
      </div>
      <div class="stat-label">Commands/Hour</div>
      <div class="stat-value" id="d2Commands">15.3k</div>
      <div class="stat-change positive">+8% from avg</div>
    </div>
    
    <div class="stat glass-lite" id="responseCard">
      <div class="stat-icon">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="10"/>
          <path d="M12 6v6l4 2"/>
        </svg>
      </div>
      <div class="stat-label">Avg Response</div>
      <div class="stat-value" id="d2Response">23ms</div>
      <div class="stat-change positive">-5ms faster</div>
    </div>
    
    <div class="stat glass-lite" id="updatedCard">
      <div class="stat-icon">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M23 4v6h-6M1 20v-6h6"/>
          <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
        </svg>
      </div>
      <div class="stat-label">Last Updated</div>
      <div class="stat-value" id="d2Updated" style="font-size: var(--text-base);"><%= updatedAt || 'Just now' %></div>
      <div class="stat-change neutral">Auto-refresh on</div>
    </div>
    
    <div class="stat glass-lite status-stat" id="statusCard">
      <div class="stat-icon">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/>
          <polyline points="22,4 12,14.01 9,11.01"/>
        </svg>
      </div>
      <div class="stat-label">System Status</div>
      <div class="stat-value">
        <span class="badge <%= status==='Online'? 'green':'red' %>" style="font-size: var(--text-sm);">
          <%= status %>
        </span>
      </div>
      <div class="stat-change <%= status==='Online'? 'positive':'negative' %>">
        <%= status==='Online'? 'All systems operational':'Issues detected' %>
      </div>
    </div>
  </div>
</section>

<!-- Enhanced System Information Panel -->
<section class="panel glass" id="secSystemInfo" style="margin-top: var(--space-8);">
  <div class="panel-head">
    <h3>
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: var(--space-3);">
        <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
        <line x1="8" y1="21" x2="16" y2="21"/>
        <line x1="12" y1="17" x2="12" y2="21"/>
      </svg>
      System Information
    </h3>
  </div>
  
  <div style="padding: var(--space-8);">
    <div class="info-grid">
      <div class="info-card">
        <div class="info-label">Node.js Version</div>
        <div class="info-value">v18.17.0</div>
      </div>
      <div class="info-card">
        <div class="info-label">Discord.js Version</div>
        <div class="info-value">v14.13.0</div>
      </div>
      <div class="info-card">
        <div class="info-label">Platform</div>
        <div class="info-value">Linux x64</div>
      </div>
      <div class="info-card">
        <div class="info-label">Memory Heap</div>
        <div class="info-value" id="heapUsed">45.2 MB</div>
      </div>
      <div class="info-card">
        <div class="info-label">Process Uptime</div>
        <div class="info-value" id="processUptime">2d 14h 32m</div>
      </div>
      <div class="info-card">
        <div class="info-label">API Version</div>
        <div class="info-value">v2.1.0</div>
      </div>
    </div>
  </div>
</section>

<style>
  /* ==== HEALTH DASHBOARD SPECIFIC STYLES ==== */
  .metric-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--space-3);
  }
  
  .metric-label {
    display: flex;
    align-items: center;
    font-size: var(--text-sm);
    color: var(--text-muted);
    font-weight: 500;
  }
  
  .metric-status {
    display: flex;
    align-items: center;
  }
  
  .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    animation: pulse 2s ease-in-out infinite;
  }
  
  .status-indicator.status-excellent {
    background: var(--emerald-400);
    box-shadow: 0 0 10px var(--emerald-400);
  }
  
  .status-indicator.status-good {
    background: var(--primary-400);
    box-shadow: 0 0 10px var(--primary-400);
  }
  
  .status-indicator.status-warning {
    background: var(--orange-400);
    box-shadow: 0 0 10px var(--orange-400);
  }
  
  .status-indicator.status-danger {
    background: var(--red-400);
    box-shadow: 0 0 10px var(--red-400);
  }
  
  .metric-trend {
    font-size: var(--text-xs);
    color: var(--text-muted);
    margin-bottom: var(--space-3);
    display: flex;
    align-items: center;
    gap: var(--space-1);
  }
  
  .metric-chart {
    height: 44px;
    margin-top: auto;
  }
  
  .metric-progress {
    height: 6px;
    background: var(--glass-border);
    border-radius: var(--radius-full);
    overflow: hidden;
    margin-top: auto;
  }
  
  .progress-bar {
    width: 100%;
    height: 100%;
    position: relative;
  }
  
  .progress-fill {
    height: 100%;
    border-radius: var(--radius-full);
    transition: width var(--duration-500) var(--ease-out);
    position: relative;
    overflow: hidden;
  }
  
  .progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    animation: shimmer 2s ease-in-out infinite;
  }
  
  .stat-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    background: var(--glass-medium);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-2xl);
    margin-bottom: var(--space-3);
    color: var(--primary-400);
  }
  
  .stat-change {
    font-size: var(--text-xs);
    font-weight: 500;
    margin-top: var(--space-1);
  }
  
  .stat-change.positive {
    color: var(--emerald-400);
  }
  
  .stat-change.negative {
    color: var(--red-400);
  }
  
  .stat-change.neutral {
    color: var(--text-muted);
  }
  
  .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-4);
  }
  
  .info-card {
    background: var(--glass-light);
    backdrop-filter: blur(8px);
    border: 1px solid var(--glass-border-light);
    border-radius: var(--radius-2xl);
    padding: var(--space-4);
    transition: all var(--duration-300) var(--ease-out);
  }
  
  .info-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    background: var(--glass-medium);
  }
  
  .info-label {
    font-size: var(--text-xs);
    color: var(--text-muted);
    font-weight: 500;
    margin-bottom: var(--space-1);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .info-value {
    font-family: 'JetBrains Mono', monospace;
    font-size: var(--text-base);
    font-weight: 600;
    color: var(--text-primary);
  }
  
  @keyframes shimmer {
    0% { left: -100%; }
    100% { left: 100%; }
  }
  
  @media (max-width: 768px) {
    .metric-row {
      grid-template-columns: 1fr;
    }
    
    .info-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Enhanced health monitoring with real-time updates
  document.addEventListener('DOMContentLoaded', function() {
    let healthData = {
      latency: [],
      memory: [],
      cpu: [],
      maxPoints: 20
    };
    
    // Simulate real-time data updates
    function updateHealthMetrics() {
      // Simulate fetching real health data
      const latency = Math.floor(Math.random() * 50) + 20;
      const memory = Math.floor(Math.random() * 100) + 150;
      const cpu = Math.floor(Math.random() * 30) + 10;
      
      // Update display values
      document.getElementById('mLatency').textContent = `${latency} ms`;
      document.getElementById('mMemory').textContent = `${memory} MB`;
      document.getElementById('mCpu').textContent = `${cpu}%`;
      
      // Update status indicators
      updateStatusIndicator('latencyStatus', latency, 50, 100);
      updateStatusIndicator('memoryStatus', memory, 200, 300);
      updateStatusIndicator('cpuStatus', cpu, 60, 80);
      
      // Store data for charts
      healthData.latency.push(latency);
      healthData.memory.push(memory);
      healthData.cpu.push(cpu);
      
      // Keep only recent data
      if (healthData.latency.length > healthData.maxPoints) {
        healthData.latency.shift();
        healthData.memory.shift();
        healthData.cpu.shift();
      }
      
      // Update charts
      updateChart('spLatency', healthData.latency, 'latencyGradient');
      updateChart('spMemory', healthData.memory, 'memoryGradient');
      updateChart('spCpu', healthData.cpu, 'cpuGradient');
      
      // Update trends
      updateTrend('latencyTrend', healthData.latency, 'ms');
      updateTrend('memoryTrend', healthData.memory, 'MB');
      updateTrend('cpuTrend', healthData.cpu, '%');
    }
    
    function updateStatusIndicator(elementId, value, warningThreshold, dangerThreshold) {
      const indicator = document.querySelector(`#${elementId} .status-indicator`);
      indicator.className = 'status-indicator';
      
      if (value < warningThreshold) {
        indicator.classList.add('status-good');
      } else if (value < dangerThreshold) {
        indicator.classList.add('status-warning');
      } else {
        indicator.classList.add('status-danger');
      }
    }
    
    function updateChart(svgId, data, gradientId) {
      const svg = document.getElementById(svgId);
      if (!svg || data.length < 2) return;
      
      const width = 160;
      const height = 44;
      const padding = 4;
      
      const max = Math.max(...data);
      const min = Math.min(...data);
      const range = max - min || 1;
      
      // Clear previous path
      svg.querySelectorAll('path').forEach(path => path.remove());
      
      // Create path
      let pathData = '';
      data.forEach((value, index) => {
        const x = (index / (data.length - 1)) * (width - padding * 2) + padding;
        const y = height - padding - ((value - min) / range) * (height - padding * 2);
        pathData += index === 0 ? `M ${x} ${y}` : ` L ${x} ${y}`;
      });
      
      // Create area path
      const areaPath = pathData + ` L ${width - padding} ${height - padding} L ${padding} ${height - padding} Z`;
      
      // Add area
      const area = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      area.setAttribute('d', areaPath);
      area.setAttribute('fill', `url(#${gradientId})`);
      area.setAttribute('opacity', '0.6');
      svg.appendChild(area);
      
      // Add line
      const line = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      line.setAttribute('d', pathData);
      line.setAttribute('stroke', `var(--${gradientId.replace('Gradient', '')}-400)`);
      line.setAttribute('stroke-width', '2');
      line.setAttribute('fill', 'none');
      svg.appendChild(line);
    }
    
    function updateTrend(elementId, data, unit) {
      if (data.length < 2) return;
      
      const current = data[data.length - 1];
      const previous = data[data.length - 2];
      const change = current - previous;
      const element = document.getElementById(elementId);
      
      if (change > 0) {
        element.textContent = `‚Üó +${change}${unit} from prev`;
        element.style.color = 'var(--orange-400)';
      } else if (change < 0) {
        element.textContent = `‚Üò ${change}${unit} from prev`;
        element.style.color = 'var(--emerald-400)';
      } else {
        element.textContent = `‚Üí No change`;
        element.style.color = 'var(--text-muted)';
      }
    }
    
    // Counter animations for stats
    function animateCounter(elementId, targetValue) {
      const element = document.getElementById(elementId);
      if (!element) return;
      
      const startValue = 0;
      const duration = 1000;
      const startTime = performance.now();
      
      function updateCounter(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const easeOut = 1 - Math.pow(1 - progress, 3);
        const currentValue = Math.floor(startValue + (targetValue - startValue) * easeOut);
        
        element.textContent = currentValue.toLocaleString();
        
        if (progress < 1) {
          requestAnimationFrame(updateCounter);
        }
      }
      
      requestAnimationFrame(updateCounter);
    }
    
    // Initialize real-time updates
    updateHealthMetrics();
    
    // Set up auto-refresh
    setInterval(updateHealthMetrics, 5000);
    
    // Manual refresh button
    document.getElementById('healthRefresh')?.addEventListener('click', updateHealthMetrics);
    
    // Initialize counter animations
    setTimeout(() => {
      animateCounter('d2Guilds', parseInt('<%= guilds %>') || 0);
      animateCounter('d2Users', parseInt('<%= users %>') || 0);
    }, 500);
    
    console.log('‚úÖ Health monitoring dashboard initialized');
  });
</script>
