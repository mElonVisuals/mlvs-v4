<!DOCTYPE html>
<html lang="en" data-theme="dark">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>mlvs.me Dashboard — <%= page.charAt(0).toUpperCase()+page.slice(1) %></title>
  <meta name="description" content="Ultra-modern Discord bot dashboard with advanced glassmorphism design and real-time analytics" />
  <meta name="robots" content="noindex, nofollow" />
  
  <link rel="stylesheet" href="/style.css" />
  <link rel="stylesheet" href="/neon.css" />
  <link rel="stylesheet" href="/dashboard.css" />
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Space+Grotesk:wght@300..700&family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap" rel="stylesheet" />
</head>
<body class="dash-body">
  <div class="dash-shell" id="dashShell">
    <aside class="dash-sidebar" id="dashSidebar" aria-label="Primary Navigation" data-store="<%= sessionStoreType %>">
      <div class="side-top">
        <div class="brand-mini">
          <img src="/logo.png" alt="mlvs.me Logo" />
          <span class="brand-text">mlvs.me</span>
        </div>
      </div>
      <nav class="side-nav" aria-label="Dashboard Navigation">
        <div class="side-section">
          <div class="side-label">Analytics</div>
          <a href="/dashboard/health" class="side-link <%= page==='health'?'active':'' %>">
            <span>Health Monitor</span>
          </a>
          <a href="/dashboard/activity" class="side-link <%= page==='activity'?'active':'' %>">
            <span>Live Activity</span>
          </a>
          <a href="/dashboard/telemetry" class="side-link <%= page==='telemetry'?'active':'' %>">
            <span>Telemetry</span>
          </a>
        </div>
        <div class="side-section">
          <div class="side-label">Management</div>
          <a href="/dashboard/actions" class="side-link <%= page==='actions'?'active':'' %>">
            <span>Actions</span>
          </a>
          <a href="/dashboard/commands" class="side-link <%= page==='commands'?'active':'' %>">
            <span>Commands</span>
          </a>
          <a href="/dashboard/system" class="side-link <%= page==='system'?'active':'' %>">
            <span>System</span>
          </a>
        </div>
        <div class="side-section">
          <div class="side-label">Resources</div>
          <a href="/dashboard/about" class="side-link <%= page==='about'?'active':'' %>">
            <span>About</span>
          </a>
          <a href="/" class="side-link">
            <span>Homepage</span>
          </a>
          <a href="/api/status" class="side-link" target="_blank">
            <span>API Status</span>
          </a>
          <% if (brand.githubUrl) { %><a href="<%= brand.githubUrl %>" target="_blank" class="side-link">
            <span>GitHub</span>
          </a><% } %>
          <% if (brand.inviteUrl) { %><a href="<%= brand.inviteUrl %>" target="_blank" class="side-link">
            <span>Invite Bot</span>
          </a><% } %>
        </div>
      </nav>
      <div class="side-footer">
        <div class="guild-box">
          <label for="guildSelect">Server Selection</label>
          <select id="guildSelect">
            <option value="">All Servers</option>
          </select>
        </div>
        <div class="token-box">
          <label for="apiToken">API Authentication</label>
          <div style="display: flex; gap: var(--space-2);">
            <input id="apiToken" type="password" placeholder="Enter API token" />
            <button id="saveToken" class="btn small">Save</button>
          </div>
        </div>
        <div style="font-size: var(--text-xs); color: var(--text-muted); text-align: center;">
          Store: <%= sessionStoreType %>
        </div>
      </div>
    </aside>
    <div class="dash-main">
      <header class="dash2-header glass">
        <div class="dash2-brand">
          <img src="/logo.png" alt="mlvs.me Dashboard" />
          <div class="dash2-title">
            <strong>mlvs.me Dashboard</strong>
            <span><%= page.charAt(0).toUpperCase()+page.slice(1) %> Analytics</span>
          </div>
        </div>
        <div class="dash2-meta">
          <span id="d2Status" class="badge <%= status==='Online'? 'green':'red' %>">
            <%= status %>
          </span>
          <span class="badge" id="storeBadge">
            <%= sessionStoreType %>
          </span>
          <button id="d2Refresh" class="btn small">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M23 4v6h-6M1 20v-6h6"/>
              <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
            </svg>
            Refresh
          </button>
          <label class="btn small" style="cursor: pointer; margin: 0;">
            <input id="d2Auto" type="checkbox" checked style="margin-right: 6px;" />
            Auto-Refresh
          </label>
        </div>
      </header>
      <main id="dashContent" class="dash2">
        <%- body %>
        <footer class="footer dash-footer">
          <div class="footer-row">
            <div>
              © <%= new Date().getFullYear() %> mlvs.me Platform - Advanced Discord Bot Analytics
            </div>
            <div style="display:flex;gap:var(--space-2);align-items:center">
              <span class="badge <%= status==='Online'?'green':'red' %>">
                <%= status %>
              </span>
              <span class="badge">
                <%= sessionStoreType %>
              </span>
              <span style="font-size: var(--text-xs); color: var(--text-muted);">
                Last Updated: <%= new Date().toLocaleTimeString() %>
              </span>
            </div>
          </div>
        </footer>
      </main>
    </div>
  </div>
  
  <!-- Enhanced Dashboard JavaScript -->
  <script>
    // Ultra-modern dashboard interactions and real-time updates
    document.addEventListener('DOMContentLoaded', function() {
      // Enhanced auto-refresh system with visual feedback
      let autoRefreshInterval;
      const autoCheckbox = document.getElementById('d2Auto');
      const refreshBtn = document.getElementById('d2Refresh');
      const statusBadge = document.getElementById('d2Status');
      
      function startAutoRefresh() {
        if (autoRefreshInterval) clearInterval(autoRefreshInterval);
        autoRefreshInterval = setInterval(() => {
          if (autoCheckbox.checked) {
            refreshDashboard();
          }
        }, 30000); // 30 seconds
      }
      
      function refreshDashboard() {
        // Add loading state
        refreshBtn.classList.add('loading');
        refreshBtn.disabled = true;
        
        // Simulate refresh (replace with actual refresh logic)
        setTimeout(() => {
          refreshBtn.classList.remove('loading');
          refreshBtn.disabled = false;
          updateLastUpdatedTime();
        }, 1000);
      }
      
      function updateLastUpdatedTime() {
        const timeElement = document.querySelector('.footer-row span:last-child');
        if (timeElement) {
          timeElement.textContent = `Last Updated: ${new Date().toLocaleTimeString()}`;
        }
      }
      
      // Enhanced sidebar navigation with smooth transitions
      const sideLinks = document.querySelectorAll('.side-link');
      sideLinks.forEach(link => {
        link.addEventListener('mouseenter', function() {
          this.style.transform = 'translateX(8px)';
        });
        
        link.addEventListener('mouseleave', function() {
          if (!this.classList.contains('active')) {
            this.style.transform = 'translateX(0)';
          }
        });
      });
      
      // Advanced glassmorphism effects on scroll
      let scrollTimeout;
      window.addEventListener('scroll', function() {
        if (!scrollTimeout) {
          scrollTimeout = setTimeout(() => {
            const header = document.querySelector('.dash2-header');
            const panels = document.querySelectorAll('.panel');
            
            if (window.scrollY > 50) {
              header.style.backdropFilter = 'blur(30px)';
              header.style.backgroundColor = 'var(--glass-strong)';
            } else {
              header.style.backdropFilter = 'blur(24px)';
              header.style.backgroundColor = 'var(--glass-ultra)';
            }
            
            // Parallax effect for panels
            panels.forEach((panel, index) => {
              const rect = panel.getBoundingClientRect();
              const isVisible = rect.top < window.innerHeight && rect.bottom > 0;
              
              if (isVisible) {
                const scrollPercent = (window.innerHeight - rect.top) / window.innerHeight;
                const translateY = (scrollPercent - 0.5) * 10;
                panel.style.transform = `translateY(${translateY}px)`;
              }
            });
            
            scrollTimeout = null;
          }, 16);
        }
      });
      
      // Enhanced token management
      const apiTokenInput = document.getElementById('apiToken');
      const saveTokenBtn = document.getElementById('saveToken');
      
      saveTokenBtn.addEventListener('click', function() {
        const token = apiTokenInput.value.trim();
        if (token) {
          // Add success animation
          this.style.background = 'linear-gradient(135deg, var(--emerald-500), var(--emerald-400))';
          this.textContent = 'Saved!';
          
          setTimeout(() => {
            this.style.background = '';
            this.textContent = 'Save';
          }, 2000);
          
          // Store token (implement actual storage logic)
          localStorage.setItem('dashboard_token', token);
        }
      });
      
      // Load saved token
      const savedToken = localStorage.getItem('dashboard_token');
      if (savedToken) {
        apiTokenInput.value = savedToken;
      }
      
      // Enhanced metric animations
      const metricValues = document.querySelectorAll('.metric-value, .stat-value');
      const animateMetrics = () => {
        metricValues.forEach(metric => {
          if (!metric.dataset.animated) {
            const rect = metric.getBoundingClientRect();
            const isInViewport = rect.top < window.innerHeight && rect.bottom > 0;
            
            if (isInViewport) {
              metric.dataset.animated = 'true';
              metric.style.animation = 'countUp 0.8s ease-out forwards';
            }
          }
        });
      };
      
      // Intersection Observer for advanced animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
          }
        });
      }, observerOptions);
      
      // Observe all panels and cards
      document.querySelectorAll('.panel, .metric-card, .stat').forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(20px)';
        el.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
        observer.observe(el);
      });
      
      // Real-time status monitoring
      function updateStatus() {
        // Simulate status check (replace with actual API call)
        fetch('/api/status')
          .then(response => response.json())
          .then(data => {
            const statusBadges = document.querySelectorAll('#d2Status, .badge.green, .badge.red');
            statusBadges.forEach(badge => {
              badge.textContent = data.status || 'Online';
              badge.className = badge.className.replace(/green|red/, data.status === 'Online' ? 'green' : 'red');
            });
          })
          .catch(() => {
            // Handle error silently
          });
      }
      
      // Enhanced keyboard shortcuts
      document.addEventListener('keydown', function(e) {
        if (e.ctrlKey || e.metaKey) {
          switch(e.key) {
            case 'r':
              e.preventDefault();
              refreshDashboard();
              break;
            case 'k':
              e.preventDefault();
              document.getElementById('guildSelect').focus();
              break;
            case '/':
              e.preventDefault();
              const searchInput = document.querySelector('input[placeholder*="Filter"]');
              if (searchInput) searchInput.focus();
              break;
          }
        }
      });
      
      // Initialize systems
      startAutoRefresh();
      animateMetrics();
      updateStatus();
      
      // Progressive enhancement for mobile
      if (window.innerWidth <= 1024) {
        const sidebar = document.getElementById('dashSidebar');
        const overlay = document.createElement('div');
        overlay.className = 'sidebar-overlay';
        overlay.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0, 0, 0, 0.5);
          backdrop-filter: blur(4px);
          z-index: 99;
          opacity: 0;
          visibility: hidden;
          transition: all 0.3s ease;
        `;
        
        document.body.appendChild(overlay);
        
        // Mobile sidebar toggle
        const toggleBtn = document.createElement('button');
        toggleBtn.innerHTML = '☰';
        toggleBtn.className = 'mobile-toggle';
        toggleBtn.style.cssText = `
          position: fixed;
          top: 20px;
          left: 20px;
          z-index: 101;
          background: var(--glass-ultra);
          backdrop-filter: blur(12px);
          border: 1px solid var(--glass-border);
          border-radius: var(--radius-lg);
          width: 44px;
          height: 44px;
          color: var(--text-primary);
          font-size: 18px;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
        `;
        
        document.body.appendChild(toggleBtn);
        
        toggleBtn.addEventListener('click', () => {
          sidebar.classList.toggle('active');
          overlay.style.opacity = sidebar.classList.contains('active') ? '1' : '0';
          overlay.style.visibility = sidebar.classList.contains('active') ? 'visible' : 'hidden';
        });
        
        overlay.addEventListener('click', () => {
          sidebar.classList.remove('active');
          overlay.style.opacity = '0';
          overlay.style.visibility = 'hidden';
        });
      }
      
      // Performance monitoring
      if ('performance' in window) {
        window.addEventListener('load', () => {
          setTimeout(() => {
            const perfData = performance.getEntriesByType('navigation')[0];
            if (perfData) {
              console.log('✅ Dashboard load performance:', {
                loadTime: `${Math.round(perfData.loadEventEnd - perfData.loadEventStart)}ms`,
                domReady: `${Math.round(perfData.domContentLoadedEventEnd - perfData.domContentLoadedEventStart)}ms`
              });
            }
          }, 0);
        });
      }
    });
    
    // CSS animations for metrics
    const style = document.createElement('style');
    style.textContent = `
      @keyframes countUp {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      
      @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
      }
      
      .loading {
        animation: pulse 1s ease-in-out infinite;
      }
    `;
    document.head.appendChild(style);
  </script>
  
  <script src="/dashboard.js" defer></script>
</body>
</html>
